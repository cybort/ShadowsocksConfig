"use strict";
(function iife() {
  const platformExportObj = (function detectPlatformExportObj() {
    if (typeof module !== 'undefined' && module.exports) {
      return module.exports;  // node
    } else if (typeof window !== 'undefined') {
      return window;  // browser
    }
    throw new Error('Could not detect platform global object (no window or module.exports)');
  })();
const isBrowser = typeof window !== 'undefined';
const b64Encode = isBrowser ? btoa : require('base-64').encode;
const b64Decode = isBrowser ? atob : require('base-64').decode;
const URL = isBrowser ? window.URL : require('url').URL;
class ShadowsocksConfigError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = new.target.name;
    }
}
platformExportObj.ShadowsocksConfigError = ShadowsocksConfigError;
class InvalidConfigField extends ShadowsocksConfigError {
}
platformExportObj.InvalidConfigField = InvalidConfigField;
class InvalidURI extends ShadowsocksConfigError {
}
platformExportObj.InvalidURI = InvalidURI;
class ValidatedConfigField {
    constructor(data) {
        this.data = data;
    }
    toString() {
        return this.data;
    }
}
platformExportObj.ValidatedConfigField = ValidatedConfigField;
function throwErrorForInvalidField(name, value, reason) {
    throw new InvalidConfigField(`Invalid ${name}: ${value} ${reason || ''}`);
}
class Host extends ValidatedConfigField {
    constructor(host) {
        if (host instanceof Host) {
            host = host.data;
        }
        super(host);
        this.isIPv6 = Host.IPV6_PATTERN.test(host);
        if (!this.isIPv6 && !Host.IPV4_PATTERN.test(host)) {
            throwErrorForInvalidField('host', host, 'IPv4 or IPv6 address required');
        }
    }
}
Host.IPV4_PATTERN = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;
Host.IPV6_PATTERN = /^(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}$/i;
platformExportObj.Host = Host;
class Port extends ValidatedConfigField {
    constructor(port) {
        if (port instanceof Port) {
            port = port.data;
        }
        if (typeof port === 'number') {
            port = port.toString();
        }
        if (!Port.PATTERN.test(port)) {
            throwErrorForInvalidField('port', port);
        }
        port = Number(port);
        if (port > 65535) {
            throwErrorForInvalidField('port', port);
        }
        super(port.toString());
    }
}
Port.PATTERN = /^[0-9]{1,5}$/;
platformExportObj.Port = Port;
platformExportObj.METHODS = new Set([
    'rc4-md5',
    'aes-128-gcm',
    'aes-192-gcm',
    'aes-256-gcm',
    'aes-128-cfb',
    'aes-192-cfb',
    'aes-256-cfb',
    'aes-128-ctr',
    'aes-192-ctr',
    'aes-256-ctr',
    'camellia-128-cfb',
    'camellia-192-cfb',
    'camellia-256-cfb',
    'bf-cfb',
    'chacha20-ietf-poly1305',
    'salsa20',
    'chacha20',
    'chacha20-ietf',
]);
class Method extends ValidatedConfigField {
    constructor(method) {
        if (method instanceof Method) {
            method = method.data;
        }
        super(method);
        if (!platformExportObj.METHODS.has(method)) {
            throwErrorForInvalidField('method', method);
        }
    }
}
platformExportObj.Method = Method;
class Password extends ValidatedConfigField {
    constructor(password) {
        super((password instanceof Password ? password.data : password) || '');
    }
}
platformExportObj.Password = Password;
class Tag extends ValidatedConfigField {
    constructor(tag) {
        super((tag instanceof Tag ? tag.data : tag) || '');
    }
}
platformExportObj.Tag = Tag;
class Plugin extends ValidatedConfigField {
    constructor(plugin) {
        super((plugin instanceof Plugin ? plugin.data : plugin) || '');
    }
}
platformExportObj.Plugin = Plugin;
class Config {
    constructor(config) {
        this.host_ = new Host(config.host);
        this.port_ = new Port(config.port);
        this.method_ = new Method(config.method);
        this.password_ = new Password(config.password);
        this.tag_ = new Tag(config.tag);
        this.plugin_ = new Plugin(config.plugin);
    }
    get host() {
        return this.host_.toString();
    }
    get port() {
        return this.port_.toString();
    }
    get method() {
        return this.method_.toString();
    }
    get password() {
        return this.password_.toString();
    }
    get tag() {
        return this.tag_.toString();
    }
    get plugin() {
        return this.plugin_.toString();
    }
}
platformExportObj.Config = Config;
class ShadowsocksURI extends Config {
    uriFormattedHost() {
        const host = this.host_.data;
        return this.host_.isIPv6 ? `[${host}]` : host;
    }
    static validateProtocol(uri) {
        if (!uri.startsWith(ShadowsocksURI.PROTOCOL)) {
            throw new InvalidURI(`URI must start with "${ShadowsocksURI.PROTOCOL}": ${uri}`);
        }
    }
    static getHash(config) {
        return `#${encodeURIComponent(config.tag)}`;
    }
    static parse(uri) {
        let error;
        for (const UriType of [LegacyBase64URI, Sip002URI]) {
            try {
                return UriType.parse(uri);
            }
            catch (e) {
                error = error || e;
            }
        }
        if (!(error instanceof InvalidURI)) {
            const originalErrorName = error.name || '(Unnamed Error)';
            const originalErrorMessage = error.message || '(no error message provided)';
            const originalErrorString = `${originalErrorName}: ${originalErrorMessage}`;
            const newErrorMessage = `Invalid input: ${uri} - Original error: ${originalErrorString}`;
            error = new InvalidURI(newErrorMessage);
        }
        throw error;
    }
}
ShadowsocksURI.PROTOCOL = 'ss:';
platformExportObj.ShadowsocksURI = ShadowsocksURI;
class LegacyBase64URI extends ShadowsocksURI {
    constructor(config) {
        super(config);
        const { method, password, host, port } = this;
        const b64EncodedData = b64Encode(`${method}:${password}@${host}:${port}`);
        const dataLength = b64EncodedData.length;
        let paddingLength = 0;
        for (; b64EncodedData[dataLength - 1 - paddingLength] === '='; paddingLength++)
            ;
        this.b64EncodedData = paddingLength === 0 ? b64EncodedData :
            b64EncodedData.substring(0, dataLength - paddingLength);
    }
    static parse(uri) {
        ShadowsocksURI.validateProtocol(uri);
        const hashIndex = uri.indexOf('#');
        let b64EndIndex = hashIndex;
        let tagStartIndex = hashIndex + 1;
        if (hashIndex === -1) {
            b64EndIndex = tagStartIndex = uri.length;
        }
        const tag = new Tag(decodeURIComponent(uri.substring(tagStartIndex)));
        const b64EncodedData = uri.substring('ss://'.length, b64EndIndex);
        const b64DecodedData = b64Decode(b64EncodedData);
        const atSignIndex = b64DecodedData.indexOf('@');
        if (atSignIndex === -1) {
            throw new InvalidURI(`Missing "@": ${b64DecodedData}`);
        }
        const methodAndPassword = b64DecodedData.substring(0, atSignIndex);
        const methodEndIndex = methodAndPassword.indexOf(':');
        if (methodEndIndex === -1) {
            throw new InvalidURI(`Missing password part: ${methodAndPassword}`);
        }
        const methodString = methodAndPassword.substring(0, methodEndIndex);
        const method = new Method(methodString);
        const passwordStartIndex = methodEndIndex + 1;
        const passwordString = methodAndPassword.substring(passwordStartIndex);
        const password = new Password(passwordString);
        const hostStartIndex = atSignIndex + 1;
        const hostAndPort = b64DecodedData.substring(hostStartIndex);
        const hostEndIndex = hostAndPort.lastIndexOf(':');
        if (hostEndIndex === -1) {
            throw new InvalidURI(`Missing port part: ${hostAndPort}`);
        }
        const uriFormattedHost = hostAndPort.substring(0, hostEndIndex);
        let host;
        try {
            host = new Host(uriFormattedHost);
        }
        catch (_) {
            host = new Host(uriFormattedHost.substring(1, uriFormattedHost.length - 1));
        }
        const portStartIndex = hostEndIndex + 1;
        const portString = hostAndPort.substring(portStartIndex);
        const port = new Port(portString);
        return new LegacyBase64URI({ method, password, host, port, tag });
    }
    toString() {
        const { b64EncodedData, tag } = this;
        const hash = ShadowsocksURI.getHash(this);
        return `ss://${b64EncodedData}${hash}`;
    }
}
platformExportObj.LegacyBase64URI = LegacyBase64URI;
class Sip002URI extends ShadowsocksURI {
    constructor(config) {
        super(config);
        const { method, password } = this;
        this.b64EncodedUserInfo = b64Encode(`${method}:${password}`);
    }
    get plugin() {
        return this.plugin_.toString();
    }
    static parse(uri) {
        ShadowsocksURI.validateProtocol(uri);
        const inputForUrlParser = `http${uri.substring(2)}`;
        const urlParserResult = new URL(inputForUrlParser);
        const uriFormattedHost = urlParserResult.hostname;
        const last = uriFormattedHost.length - 1;
        const brackets = uriFormattedHost[0] === '[' && uriFormattedHost[last] === ']';
        const hostString = brackets ? uriFormattedHost.substring(1, last) : uriFormattedHost;
        const host = new Host(hostString);
        const port = new Port(urlParserResult.port);
        const tag = new Tag(decodeURIComponent(urlParserResult.hash.substring(1)));
        const b64EncodedUserInfo = urlParserResult.username.replace(/%3D/g, '=');
        const b64DecodedUserInfo = b64Decode(b64EncodedUserInfo);
        const colonIdx = b64DecodedUserInfo.indexOf(':');
        if (colonIdx === -1) {
            throw new InvalidURI(`Missing password part: ${b64DecodedUserInfo}`);
        }
        const methodString = b64DecodedUserInfo.substring(0, colonIdx);
        const method = new Method(methodString);
        const passwordString = b64DecodedUserInfo.substring(colonIdx + 1);
        const password = new Password(passwordString);
        let plugin;
        if (urlParserResult.searchParams) {
            const pluginString = urlParserResult.searchParams.get('plugin');
            plugin = pluginString ? new Plugin(pluginString) : undefined;
        }
        return new Sip002URI({ method, password, host, port, tag, plugin });
    }
    toString() {
        const { b64EncodedUserInfo, host, port, plugin, tag } = this;
        const queryString = plugin ? `?plugin=${plugin}` : '';
        const hash = ShadowsocksURI.getHash(this);
        const uriHost = this.uriFormattedHost();
        return `ss://${b64EncodedUserInfo}@${uriHost}:${port}/${queryString}${hash}`;
    }
}
platformExportObj.Sip002URI = Sip002URI;
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLElBQUksU0FBUyxDQUFDLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUM3RCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0RCxNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxRQUFRLGtCQUFrQixJQUFJLE9BQU8sSUFBSSxJQUFJLElBQUksV0FBVyxHQUFHLElBQUksRUFBRSxDQUFDO0lBQy9FLENBQUM7Q0FDRjtBQXRERCw4QkFzREMiLCJmaWxlIjoic2hhZG93c29ja3NfY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJub2RlXCIgLz5cblxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBiNjRFbmNvZGUgPSBpc0Jyb3dzZXIgPyBidG9hIDogcmVxdWlyZSgnYmFzZS02NCcpLmVuY29kZTtcbmNvbnN0IGI2NERlY29kZSA9IGlzQnJvd3NlciA/IGF0b2IgOiByZXF1aXJlKCdiYXNlLTY0JykuZGVjb2RlO1xuY29uc3QgVVJMID0gaXNCcm93c2VyID8gd2luZG93LlVSTCA6IHJlcXVpcmUoJ3VybCcpLlVSTDtcblxuLy8gQ3VzdG9tIGVycm9yIGJhc2UgY2xhc3NcbmV4cG9ydCBjbGFzcyBTaGFkb3dzb2Nrc0NvbmZpZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTsgIC8vICdFcnJvcicgYnJlYWtzIHByb3RvdHlwZSBjaGFpbiBoZXJlIGlmIHRoaXMgaXMgdHJhbnNwaWxlZCB0byBlczVcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpOyAgLy8gcmVzdG9yZSBwcm90b3R5cGUgY2hhaW5cbiAgICB0aGlzLm5hbWUgPSBuZXcudGFyZ2V0Lm5hbWU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludmFsaWRDb25maWdGaWVsZCBleHRlbmRzIFNoYWRvd3NvY2tzQ29uZmlnRXJyb3Ige31cblxuZXhwb3J0IGNsYXNzIEludmFsaWRVUkkgZXh0ZW5kcyBTaGFkb3dzb2Nrc0NvbmZpZ0Vycm9yIHt9XG5cbi8vIFNlbGYtdmFsaWRhdGluZy9ub3JtYWxpemluZyBjb25maWcgZGF0YSB0eXBlcyBzdWJjbGFzcyB0aGlzIFZhbGlkYXRlZENvbmZpZ0ZpZWxkIGNsYXNzLlxuLy8gQ29uc3RydWN0b3JzIHRha2UgYSBzdHJpbmcsIHZhbGlkYXRlL25vcm1hbGl6ZS9hY2NlcHQgaWYgdmFsaWQsIG9yIHRocm93IG90aGVyd2lzZS5cbi8vIFNvbWUgZXhhbXBsZXMgKFBvcnQgaXMgYSBWYWxpZGF0ZWRDb25maWdGaWVsZCBzdWJjbGFzcywgc2VlIGJlbG93KTpcbi8vICAgbmV3IFBvcnQoJycpICAgICAgICAgICAtPiB0aHJvd3Ncbi8vICAgbmV3IFBvcnQoJ25vdCBhIHBvcnQnKSAtPiB0aHJvd3Ncbi8vICAgbmV3IFBvcnQoJy0xMjMnKSAgICAgICAtPiB0aHJvd3Ncbi8vICAgbmV3IFBvcnQoJzEyMy40JykgICAgICAtPiB0aHJvd3Ncbi8vICAgbmV3IFBvcnQoJzAxMjM0JykgICAgICAtPiAnMTIzNCdcbmV4cG9ydCBjbGFzcyBWYWxpZGF0ZWRDb25maWdGaWVsZCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBkYXRhOiBzdHJpbmcpIHt9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRocm93RXJyb3JGb3JJbnZhbGlkRmllbGQobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55LCByZWFzb24/OiBzdHJpbmcpIHtcbiAgdGhyb3cgbmV3IEludmFsaWRDb25maWdGaWVsZChgSW52YWxpZCAke25hbWV9OiAke3ZhbHVlfSAke3JlYXNvbiB8fCAnJ31gKTtcbn1cblxuZXhwb3J0IGNsYXNzIEhvc3QgZXh0ZW5kcyBWYWxpZGF0ZWRDb25maWdGaWVsZCB7XG4gIHB1YmxpYyBzdGF0aWMgSVBWNF9QQVRURVJOID0gL14oPzpbMC05XXsxLDN9XFwuKXszfVswLTldezEsM30kLztcbiAgcHVibGljIHN0YXRpYyBJUFY2X1BBVFRFUk4gPSAvXig/OltBLUYwLTldezEsNH06KXs3fVtBLUYwLTldezEsNH0kL2k7XG4gIHB1YmxpYyByZWFkb25seSBpc0lQdjY6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoaG9zdDogSG9zdCB8IHN0cmluZykge1xuICAgIGlmIChob3N0IGluc3RhbmNlb2YgSG9zdCkge1xuICAgICAgaG9zdCA9IGhvc3QuZGF0YTtcbiAgICB9XG4gICAgc3VwZXIoaG9zdCk7XG4gICAgdGhpcy5pc0lQdjYgPSBIb3N0LklQVjZfUEFUVEVSTi50ZXN0KGhvc3QpO1xuICAgIGlmICghdGhpcy5pc0lQdjYgJiYgIUhvc3QuSVBWNF9QQVRURVJOLnRlc3QoaG9zdCkpIHtcbiAgICAgIHRocm93RXJyb3JGb3JJbnZhbGlkRmllbGQoJ2hvc3QnLCBob3N0LCAnSVB2NCBvciBJUHY2IGFkZHJlc3MgcmVxdWlyZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBvcnQgZXh0ZW5kcyBWYWxpZGF0ZWRDb25maWdGaWVsZCB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUEFUVEVSTiA9IC9eWzAtOV17MSw1fSQvO1xuXG4gIGNvbnN0cnVjdG9yKHBvcnQ6IFBvcnQgfCBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBpZiAocG9ydCBpbnN0YW5jZW9mIFBvcnQpIHtcbiAgICAgIHBvcnQgPSBwb3J0LmRhdGE7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcG9ydCA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFN0cmluZ2lmeSBpbiBjYXNlIG5lZ2F0aXZlIG9yIGZsb2F0aW5nIHBvaW50IC0+IHRoZSByZWdleCB0ZXN0IGJlbG93IHdpbGwgY2F0Y2guXG4gICAgICBwb3J0ID0gcG9ydC50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoIVBvcnQuUEFUVEVSTi50ZXN0KHBvcnQpKSB7XG4gICAgICB0aHJvd0Vycm9yRm9ySW52YWxpZEZpZWxkKCdwb3J0JywgcG9ydCk7XG4gICAgfVxuICAgIC8vIENvdWxkIGV4Y2VlZCB0aGUgbWF4aW11bSBwb3J0IG51bWJlciwgc28gY29udmVydCB0byBOdW1iZXIgdG8gY2hlY2suIENvdWxkIGFsc28gaGF2ZSBsZWFkaW5nXG4gICAgLy8gemVyb3MuIENvbnZlcnRpbmcgdG8gTnVtYmVyIGRyb3BzIHRob3NlLCBzbyB3ZSBnZXQgbm9ybWFsaXphdGlvbiBmb3IgZnJlZS4gOilcbiAgICBwb3J0ID0gTnVtYmVyKHBvcnQpO1xuICAgIGlmIChwb3J0ID4gNjU1MzUpIHtcbiAgICAgIHRocm93RXJyb3JGb3JJbnZhbGlkRmllbGQoJ3BvcnQnLCBwb3J0KTtcbiAgICB9XG4gICAgc3VwZXIocG9ydC50b1N0cmluZygpKTtcbiAgfVxufVxuXG4vLyBBIG1ldGhvZCB2YWx1ZSBtdXN0IGV4YWN0bHkgbWF0Y2ggYW4gZWxlbWVudCBpbiB0aGUgc2V0IG9mIGtub3duIGNpcGhlcnMuXG4vLyByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaGFkb3dzb2Nrcy9zaGFkb3dzb2Nrcy1saWJldi9ibG9iLzEwYTJkM2UzL2NvbXBsZXRpb25zL2Jhc2gvc3MtcmVkaXIjTDVcbmV4cG9ydCBjb25zdCBNRVRIT0RTID0gbmV3IFNldChbXG4gICdyYzQtbWQ1JyxcbiAgJ2Flcy0xMjgtZ2NtJyxcbiAgJ2Flcy0xOTItZ2NtJyxcbiAgJ2Flcy0yNTYtZ2NtJyxcbiAgJ2Flcy0xMjgtY2ZiJyxcbiAgJ2Flcy0xOTItY2ZiJyxcbiAgJ2Flcy0yNTYtY2ZiJyxcbiAgJ2Flcy0xMjgtY3RyJyxcbiAgJ2Flcy0xOTItY3RyJyxcbiAgJ2Flcy0yNTYtY3RyJyxcbiAgJ2NhbWVsbGlhLTEyOC1jZmInLFxuICAnY2FtZWxsaWEtMTkyLWNmYicsXG4gICdjYW1lbGxpYS0yNTYtY2ZiJyxcbiAgJ2JmLWNmYicsXG4gICdjaGFjaGEyMC1pZXRmLXBvbHkxMzA1JyxcbiAgJ3NhbHNhMjAnLFxuICAnY2hhY2hhMjAnLFxuICAnY2hhY2hhMjAtaWV0ZicsXG5dKTtcblxuZXhwb3J0IGNsYXNzIE1ldGhvZCBleHRlbmRzIFZhbGlkYXRlZENvbmZpZ0ZpZWxkIHtcbiAgY29uc3RydWN0b3IobWV0aG9kOiBNZXRob2QgfCBzdHJpbmcpIHtcbiAgICBpZiAobWV0aG9kIGluc3RhbmNlb2YgTWV0aG9kKSB7XG4gICAgICBtZXRob2QgPSBtZXRob2QuZGF0YTtcbiAgICB9XG4gICAgc3VwZXIobWV0aG9kKTtcbiAgICBpZiAoIU1FVEhPRFMuaGFzKG1ldGhvZCkpIHtcbiAgICAgIHRocm93RXJyb3JGb3JJbnZhbGlkRmllbGQoJ21ldGhvZCcsIG1ldGhvZCk7XG4gICAgfVxuICB9XG59XG5cbi8vIEN1cnJlbnRseSBubyB2YWxpZGF0aW9uIGlzIHBlcmZvcm1lZCBmb3IgUGFzc3dvcmQsIFRhZywgb3IgUGx1Z2luLlxuLy8gQ2xpZW50IGNvZGUgaXMgcmVzcG9uc2libGUgZm9yIHZhbGlkYXRpbmcgYW5kIHNhbml0aXppbmcgdGhlc2Ugd2hlbiB1c2luZyB3aXRoIHVudHJ1c3RlZCBpbnB1dC5cbi8vIFRPRE86IERvY3VtZW50IHRoaXMgaW4gdGhlIFJFQURNRS5cbmV4cG9ydCBjbGFzcyBQYXNzd29yZCBleHRlbmRzIFZhbGlkYXRlZENvbmZpZ0ZpZWxkIHtcbiAgY29uc3RydWN0b3IocGFzc3dvcmQ/OiBQYXNzd29yZCB8IHN0cmluZykge1xuICAgIHN1cGVyKChwYXNzd29yZCBpbnN0YW5jZW9mIFBhc3N3b3JkID8gcGFzc3dvcmQuZGF0YSA6IHBhc3N3b3JkKSB8fCAnJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRhZyBleHRlbmRzIFZhbGlkYXRlZENvbmZpZ0ZpZWxkIHtcbiAgY29uc3RydWN0b3IodGFnPzogVGFnIHwgc3RyaW5nKSB7XG4gICAgc3VwZXIoKHRhZyBpbnN0YW5jZW9mIFRhZyA/IHRhZy5kYXRhIDogdGFnKSB8fCAnJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBsdWdpbiBleHRlbmRzIFZhbGlkYXRlZENvbmZpZ0ZpZWxkIHtcbiAgY29uc3RydWN0b3IocGx1Z2luPzogUGx1Z2luIHwgc3RyaW5nKSB7XG4gICAgc3VwZXIoKHBsdWdpbiBpbnN0YW5jZW9mIFBsdWdpbiA/IHBsdWdpbi5kYXRhIDogcGx1Z2luKSB8fCAnJyk7XG4gIH1cbn1cbi8vIEVuZCBWYWxpZGF0ZWRDb25maWdGaWVsZCB0eXBlcy5cblxuZXhwb3J0IGludGVyZmFjZSBVbnNhZmVDb25maWcge1xuICBob3N0Pzogc3RyaW5nO1xuICBwb3J0Pzogc3RyaW5nIHwgbnVtYmVyO1xuICBtZXRob2Q/OiBzdHJpbmc7XG4gIHBhc3N3b3JkPzogc3RyaW5nO1xuICB0YWc/OiBzdHJpbmc7XG4gIHBsdWdpbj86IHN0cmluZzsgIC8vIFNJUDAwMyBwbHVnaW4sIGZvciBhcHBsaWNhdGlvbnMgdGhhdCBzdXBwb3J0IGl0LlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNhZmVDb25maWcge1xuICBob3N0OiBIb3N0O1xuICBwb3J0OiBQb3J0O1xuICBtZXRob2Q6IE1ldGhvZDtcbiAgcGFzc3dvcmQ6IFBhc3N3b3JkO1xuICB0YWc/OiBQYXNzd29yZDtcbiAgcGx1Z2luPzogUGx1Z2luO1xufVxuXG5leHBvcnQgdHlwZSBNYXliZVVuc2FmZUNvbmZpZyA9IFVuc2FmZUNvbmZpZyB8IFNhZmVDb25maWc7XG5cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuICBwcm90ZWN0ZWQgaG9zdF86IEhvc3Q7XG4gIHByb3RlY3RlZCBwb3J0XzogUG9ydDtcbiAgcHJvdGVjdGVkIG1ldGhvZF86IE1ldGhvZDtcbiAgcHJvdGVjdGVkIHBhc3N3b3JkXzogUGFzc3dvcmQ7XG4gIHByb3RlY3RlZCB0YWdfOiBUYWc7XG4gIHByb3RlY3RlZCBwbHVnaW5fOiBQbHVnaW47XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBNYXliZVVuc2FmZUNvbmZpZykge1xuICAgIC8vIFVzZSB0aGUgXCIhXCIgdHlwZSBhc3NlcnRpb24gb3BlcmF0b3IgZm9yIHRoZSByZXF1aXJlZCBmaWVsZHMgdG8gdGVsbCB0c2MgdGhhdCB3ZSBoYW5kbGVcbiAgICAvLyB1bmRlZmluZWQgaW4gdGhlIFZhbGlkYXRlZENvbmZpZ0ZpZWxkIHN1YmNsYXNzIGNvbnN0cnVjdG9yczsgdHNjIGNhbid0IGZpZ3VyZSB0aGF0IG91dCB5ZXQuXG4gICAgdGhpcy5ob3N0XyA9IG5ldyBIb3N0KGNvbmZpZy5ob3N0ISk7XG4gICAgdGhpcy5wb3J0XyA9IG5ldyBQb3J0KGNvbmZpZy5wb3J0ISk7XG4gICAgdGhpcy5tZXRob2RfID0gbmV3IE1ldGhvZChjb25maWcubWV0aG9kISk7XG4gICAgdGhpcy5wYXNzd29yZF8gPSBuZXcgUGFzc3dvcmQoY29uZmlnLnBhc3N3b3JkISk7XG4gICAgdGhpcy50YWdfID0gbmV3IFRhZyhjb25maWcudGFnKTtcbiAgICB0aGlzLnBsdWdpbl8gPSBuZXcgUGx1Z2luKGNvbmZpZy5wbHVnaW4pO1xuICB9XG5cbiAgZ2V0IGhvc3QoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5ob3N0Xy50b1N0cmluZygpO1xuICB9XG5cbiAgZ2V0IHBvcnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wb3J0Xy50b1N0cmluZygpO1xuICB9XG5cbiAgZ2V0IG1ldGhvZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm1ldGhvZF8udG9TdHJpbmcoKTtcbiAgfVxuXG4gIGdldCBwYXNzd29yZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnBhc3N3b3JkXy50b1N0cmluZygpO1xuICB9XG5cbiAgZ2V0IHRhZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRhZ18udG9TdHJpbmcoKTtcbiAgfVxuXG4gIGdldCBwbHVnaW4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wbHVnaW5fLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNoYWRvd3NvY2tzVVJJIGV4dGVuZHMgQ29uZmlnIHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBQUk9UT0NPTCA9ICdzczonO1xuXG4gIGFic3RyYWN0IHRvU3RyaW5nKCk6IHN0cmluZztcblxuICB1cmlGb3JtYXR0ZWRIb3N0KCkge1xuICAgIGNvbnN0IGhvc3QgPSB0aGlzLmhvc3RfLmRhdGE7XG4gICAgcmV0dXJuIHRoaXMuaG9zdF8uaXNJUHY2ID8gYFske2hvc3R9XWAgOiBob3N0O1xuICB9XG5cbiAgc3RhdGljIHZhbGlkYXRlUHJvdG9jb2wodXJpOiBzdHJpbmcpIHtcbiAgICBpZiAoIXVyaS5zdGFydHNXaXRoKFNoYWRvd3NvY2tzVVJJLlBST1RPQ09MKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRVUkkoYFVSSSBtdXN0IHN0YXJ0IHdpdGggXCIke1NoYWRvd3NvY2tzVVJJLlBST1RPQ09MfVwiOiAke3VyaX1gKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0SGFzaChjb25maWc6IENvbmZpZykge1xuICAgIHJldHVybiBgIyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy50YWcpfWA7XG4gIH1cblxuICBzdGF0aWMgcGFyc2UodXJpOiBzdHJpbmcpOiBTaGFkb3dzb2Nrc1VSSSB7XG4gICAgbGV0IGVycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcbiAgICBmb3IgKGNvbnN0IFVyaVR5cGUgb2YgW0xlZ2FjeUJhc2U2NFVSSSwgU2lwMDAyVVJJXSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFVyaVR5cGUucGFyc2UodXJpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3IgPSBlcnJvciB8fCBlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEludmFsaWRVUkkpKSB7XG4gICAgICBjb25zdCBvcmlnaW5hbEVycm9yTmFtZSA9IGVycm9yIS5uYW1lISB8fCAnKFVubmFtZWQgRXJyb3IpJztcbiAgICAgIGNvbnN0IG9yaWdpbmFsRXJyb3JNZXNzYWdlID0gZXJyb3IhLm1lc3NhZ2UhIHx8ICcobm8gZXJyb3IgbWVzc2FnZSBwcm92aWRlZCknO1xuICAgICAgY29uc3Qgb3JpZ2luYWxFcnJvclN0cmluZyA9IGAke29yaWdpbmFsRXJyb3JOYW1lfTogJHtvcmlnaW5hbEVycm9yTWVzc2FnZX1gO1xuICAgICAgY29uc3QgbmV3RXJyb3JNZXNzYWdlID0gYEludmFsaWQgaW5wdXQ6ICR7dXJpfSAtIE9yaWdpbmFsIGVycm9yOiAke29yaWdpbmFsRXJyb3JTdHJpbmd9YDtcbiAgICAgIGVycm9yID0gbmV3IEludmFsaWRVUkkobmV3RXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLy8gUmVmOiBodHRwczovL3NoYWRvd3NvY2tzLm9yZy9lbi9jb25maWcvcXVpY2stZ3VpZGUuaHRtbFxuZXhwb3J0IGNsYXNzIExlZ2FjeUJhc2U2NFVSSSBleHRlbmRzIFNoYWRvd3NvY2tzVVJJIHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGI2NEVuY29kZWREYXRhOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBNYXliZVVuc2FmZUNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgY29uc3QgeyBtZXRob2QsIHBhc3N3b3JkLCBob3N0LCBwb3J0IH0gPSB0aGlzO1xuICAgIGNvbnN0IGI2NEVuY29kZWREYXRhID0gYjY0RW5jb2RlKGAke21ldGhvZH06JHtwYXNzd29yZH1AJHtob3N0fToke3BvcnR9YCk7XG4gICAgY29uc3QgZGF0YUxlbmd0aCA9IGI2NEVuY29kZWREYXRhLmxlbmd0aDtcbiAgICBsZXQgcGFkZGluZ0xlbmd0aCA9IDA7XG4gICAgZm9yICg7IGI2NEVuY29kZWREYXRhW2RhdGFMZW5ndGggLSAxIC0gcGFkZGluZ0xlbmd0aF0gPT09ICc9JzsgcGFkZGluZ0xlbmd0aCsrKTtcbiAgICB0aGlzLmI2NEVuY29kZWREYXRhID0gcGFkZGluZ0xlbmd0aCA9PT0gMCA/IGI2NEVuY29kZWREYXRhIDpcbiAgICAgICAgYjY0RW5jb2RlZERhdGEuc3Vic3RyaW5nKDAsIGRhdGFMZW5ndGggLSBwYWRkaW5nTGVuZ3RoKTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZSh1cmk6IHN0cmluZykge1xuICAgIFNoYWRvd3NvY2tzVVJJLnZhbGlkYXRlUHJvdG9jb2wodXJpKTtcbiAgICBjb25zdCBoYXNoSW5kZXggPSB1cmkuaW5kZXhPZignIycpO1xuICAgIGxldCBiNjRFbmRJbmRleCA9IGhhc2hJbmRleDtcbiAgICBsZXQgdGFnU3RhcnRJbmRleCA9IGhhc2hJbmRleCArIDE7XG4gICAgaWYgKGhhc2hJbmRleCA9PT0gLTEpIHtcbiAgICAgIGI2NEVuZEluZGV4ID0gdGFnU3RhcnRJbmRleCA9IHVyaS5sZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IHRhZyA9IG5ldyBUYWcoZGVjb2RlVVJJQ29tcG9uZW50KHVyaS5zdWJzdHJpbmcodGFnU3RhcnRJbmRleCkpKTtcbiAgICBjb25zdCBiNjRFbmNvZGVkRGF0YSA9IHVyaS5zdWJzdHJpbmcoJ3NzOi8vJy5sZW5ndGgsIGI2NEVuZEluZGV4KTtcbiAgICBjb25zdCBiNjREZWNvZGVkRGF0YSA9IGI2NERlY29kZShiNjRFbmNvZGVkRGF0YSk7XG4gICAgY29uc3QgYXRTaWduSW5kZXggPSBiNjREZWNvZGVkRGF0YS5pbmRleE9mKCdAJyk7XG4gICAgaWYgKGF0U2lnbkluZGV4ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRVUkkoYE1pc3NpbmcgXCJAXCI6ICR7YjY0RGVjb2RlZERhdGF9YCk7XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZEFuZFBhc3N3b3JkID0gYjY0RGVjb2RlZERhdGEuc3Vic3RyaW5nKDAsIGF0U2lnbkluZGV4KTtcbiAgICBjb25zdCBtZXRob2RFbmRJbmRleCA9IG1ldGhvZEFuZFBhc3N3b3JkLmluZGV4T2YoJzonKTtcbiAgICBpZiAobWV0aG9kRW5kSW5kZXggPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFVSSShgTWlzc2luZyBwYXNzd29yZCBwYXJ0OiAke21ldGhvZEFuZFBhc3N3b3JkfWApO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2RTdHJpbmcgPSBtZXRob2RBbmRQYXNzd29yZC5zdWJzdHJpbmcoMCwgbWV0aG9kRW5kSW5kZXgpO1xuICAgIGNvbnN0IG1ldGhvZCA9IG5ldyBNZXRob2QobWV0aG9kU3RyaW5nKTtcbiAgICBjb25zdCBwYXNzd29yZFN0YXJ0SW5kZXggPSBtZXRob2RFbmRJbmRleCArIDE7XG4gICAgY29uc3QgcGFzc3dvcmRTdHJpbmcgPSBtZXRob2RBbmRQYXNzd29yZC5zdWJzdHJpbmcocGFzc3dvcmRTdGFydEluZGV4KTtcbiAgICBjb25zdCBwYXNzd29yZCA9IG5ldyBQYXNzd29yZChwYXNzd29yZFN0cmluZyk7XG4gICAgY29uc3QgaG9zdFN0YXJ0SW5kZXggPSBhdFNpZ25JbmRleCArIDE7XG4gICAgY29uc3QgaG9zdEFuZFBvcnQgPSBiNjREZWNvZGVkRGF0YS5zdWJzdHJpbmcoaG9zdFN0YXJ0SW5kZXgpO1xuICAgIGNvbnN0IGhvc3RFbmRJbmRleCA9IGhvc3RBbmRQb3J0Lmxhc3RJbmRleE9mKCc6Jyk7XG4gICAgaWYgKGhvc3RFbmRJbmRleCA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkVVJJKGBNaXNzaW5nIHBvcnQgcGFydDogJHtob3N0QW5kUG9ydH1gKTtcbiAgICB9XG4gICAgY29uc3QgdXJpRm9ybWF0dGVkSG9zdCA9IGhvc3RBbmRQb3J0LnN1YnN0cmluZygwLCBob3N0RW5kSW5kZXgpO1xuICAgIGxldCBob3N0OiBIb3N0O1xuICAgIHRyeSB7XG4gICAgICBob3N0ID0gbmV3IEhvc3QodXJpRm9ybWF0dGVkSG9zdCk7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgLy8gQ291bGQgYmUgSVB2NiBob3N0IGZvcm1hdHRlZCB3aXRoIHN1cnJvdW5kaW5nIGJyYWNrZXRzLCBzbyB0cnkgc3RyaXBwaW5nIGZpcnN0IGFuZCBsYXN0XG4gICAgICAvLyBjaGFyYWN0ZXJzLiBJZiB0aGlzIHRocm93cywgZ2l2ZSB1cCBhbmQgbGV0IHRoZSBleGNlcHRpb24gcHJvcGFnYXRlLlxuICAgICAgaG9zdCA9IG5ldyBIb3N0KHVyaUZvcm1hdHRlZEhvc3Quc3Vic3RyaW5nKDEsIHVyaUZvcm1hdHRlZEhvc3QubGVuZ3RoIC0gMSkpO1xuICAgIH1cbiAgICBjb25zdCBwb3J0U3RhcnRJbmRleCA9IGhvc3RFbmRJbmRleCArIDE7XG4gICAgY29uc3QgcG9ydFN0cmluZyA9IGhvc3RBbmRQb3J0LnN1YnN0cmluZyhwb3J0U3RhcnRJbmRleCk7XG4gICAgY29uc3QgcG9ydCA9IG5ldyBQb3J0KHBvcnRTdHJpbmcpO1xuICAgIHJldHVybiBuZXcgTGVnYWN5QmFzZTY0VVJJKHttZXRob2QsIHBhc3N3b3JkLCBob3N0LCBwb3J0LCB0YWd9KTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IHsgYjY0RW5jb2RlZERhdGEsIHRhZyB9ID0gdGhpcztcbiAgICBjb25zdCBoYXNoID0gU2hhZG93c29ja3NVUkkuZ2V0SGFzaCh0aGlzKTtcbiAgICByZXR1cm4gYHNzOi8vJHtiNjRFbmNvZGVkRGF0YX0ke2hhc2h9YDtcbiAgfVxufVxuXG4vLyBSZWY6IGh0dHBzOi8vc2hhZG93c29ja3Mub3JnL2VuL3NwZWMvU0lQMDAyLVVSSS1TY2hlbWUuaHRtbFxuLy8gTk9URTogQ3VycmVudGx5IHRoZSBwbHVnaW4gcXVlcnkgcGFyYW0gaXMgcHJlc2VydmVkIG9uIGEgYmVzdC1lZmZvcnQgYmFzaXMuIEl0IGlzIHNpbGVudGx5XG4vLyAgICAgICBkcm9wcGVkIG9uIHBsYXRmb3JtcyB0aGF0IGRvIG5vdCBzdXBwb3J0IHRoZSBmdWxsIHdoYXR3ZyBVUkwgc3RhbmRhcmQgKGNmLiBgc2VhcmNoUGFyYW1zYCkuXG4vLyAgICAgICBSZWY6XG4vLyAgICAgICAgIC0gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtY2xhc3Ncbi8vICAgICAgICAgLSBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXVybHNlYXJjaHBhcmFtc1xuZXhwb3J0IGNsYXNzIFNpcDAwMlVSSSBleHRlbmRzIFNoYWRvd3NvY2tzVVJJIHtcbiAgYjY0RW5jb2RlZFVzZXJJbmZvOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBNYXliZVVuc2FmZUNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgY29uc3QgeyBtZXRob2QsIHBhc3N3b3JkIH0gPSB0aGlzO1xuICAgIHRoaXMuYjY0RW5jb2RlZFVzZXJJbmZvID0gYjY0RW5jb2RlKGAke21ldGhvZH06JHtwYXNzd29yZH1gKTtcbiAgfVxuXG4gIGdldCBwbHVnaW4oKSB7XG4gICAgcmV0dXJuIHRoaXMucGx1Z2luXy50b1N0cmluZygpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlKHVyaTogc3RyaW5nKSB7XG4gICAgU2hhZG93c29ja3NVUkkudmFsaWRhdGVQcm90b2NvbCh1cmkpO1xuICAgIC8vIENhbiB1c2UgYnVpbHQtaW4gVVJMIHBhcnNlciBmb3IgZXhwZWRpZW5jZS4gSnVzdCBoYXZlIHRvIHJlcGxhY2UgXCJzc1wiIHdpdGggXCJodHRwXCIgdG8gZW5zdXJlXG4gICAgLy8gY29ycmVjdCByZXN1bHRzLlxuICAgIGNvbnN0IGlucHV0Rm9yVXJsUGFyc2VyID0gYGh0dHAke3VyaS5zdWJzdHJpbmcoMil9YDtcbiAgICAvLyBUaGUgYnVpbHQtaW4gVVJMIHBhcnNlciB0aHJvd3MgYXMgZGVzaXJlZCB3aGVuIGdpdmVuIFVSSXMgd2l0aCBpbnZhbGlkIHN5bnRheC5cbiAgICBjb25zdCB1cmxQYXJzZXJSZXN1bHQgPSBuZXcgVVJMKGlucHV0Rm9yVXJsUGFyc2VyKTtcbiAgICBjb25zdCB1cmlGb3JtYXR0ZWRIb3N0ID0gdXJsUGFyc2VyUmVzdWx0Lmhvc3RuYW1lO1xuICAgIC8vIFVSSS1mb3JtYXR0ZWQgSVB2NiBob3N0bmFtZXMgaGF2ZSBzdXJyb3VuZGluZyBicmFja2V0cy5cbiAgICBjb25zdCBsYXN0ID0gdXJpRm9ybWF0dGVkSG9zdC5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGJyYWNrZXRzID0gdXJpRm9ybWF0dGVkSG9zdFswXSA9PT0gJ1snICYmIHVyaUZvcm1hdHRlZEhvc3RbbGFzdF0gPT09ICddJztcbiAgICBjb25zdCBob3N0U3RyaW5nID0gYnJhY2tldHMgPyB1cmlGb3JtYXR0ZWRIb3N0LnN1YnN0cmluZygxLCBsYXN0KSA6IHVyaUZvcm1hdHRlZEhvc3Q7XG4gICAgY29uc3QgaG9zdCA9IG5ldyBIb3N0KGhvc3RTdHJpbmcpO1xuICAgIGNvbnN0IHBvcnQgPSBuZXcgUG9ydCh1cmxQYXJzZXJSZXN1bHQucG9ydCk7XG4gICAgY29uc3QgdGFnID0gbmV3IFRhZyhkZWNvZGVVUklDb21wb25lbnQodXJsUGFyc2VyUmVzdWx0Lmhhc2guc3Vic3RyaW5nKDEpKSk7XG4gICAgY29uc3QgYjY0RW5jb2RlZFVzZXJJbmZvID0gdXJsUGFyc2VyUmVzdWx0LnVzZXJuYW1lLnJlcGxhY2UoLyUzRC9nLCAnPScpO1xuICAgIC8vIGJhc2U2NC5kZWNvZGUgdGhyb3dzIGFzIGRlc2lyZWQgd2hlbiBnaXZlbiBpbnZhbGlkIGJhc2U2NCBpbnB1dC5cbiAgICBjb25zdCBiNjREZWNvZGVkVXNlckluZm8gPSBiNjREZWNvZGUoYjY0RW5jb2RlZFVzZXJJbmZvKTtcbiAgICBjb25zdCBjb2xvbklkeCA9IGI2NERlY29kZWRVc2VySW5mby5pbmRleE9mKCc6Jyk7XG4gICAgaWYgKGNvbG9uSWR4ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRVUkkoYE1pc3NpbmcgcGFzc3dvcmQgcGFydDogJHtiNjREZWNvZGVkVXNlckluZm99YCk7XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZFN0cmluZyA9IGI2NERlY29kZWRVc2VySW5mby5zdWJzdHJpbmcoMCwgY29sb25JZHgpO1xuICAgIGNvbnN0IG1ldGhvZCA9IG5ldyBNZXRob2QobWV0aG9kU3RyaW5nKTtcbiAgICBjb25zdCBwYXNzd29yZFN0cmluZyA9IGI2NERlY29kZWRVc2VySW5mby5zdWJzdHJpbmcoY29sb25JZHggKyAxKTtcbiAgICBjb25zdCBwYXNzd29yZCA9IG5ldyBQYXNzd29yZChwYXNzd29yZFN0cmluZyk7XG4gICAgbGV0IHBsdWdpbjogUGx1Z2luIHwgdW5kZWZpbmVkO1xuICAgIGlmICh1cmxQYXJzZXJSZXN1bHQuc2VhcmNoUGFyYW1zKSB7XG4gICAgICBjb25zdCBwbHVnaW5TdHJpbmcgPSB1cmxQYXJzZXJSZXN1bHQuc2VhcmNoUGFyYW1zLmdldCgncGx1Z2luJyk7XG4gICAgICBwbHVnaW4gPSBwbHVnaW5TdHJpbmcgPyBuZXcgUGx1Z2luKHBsdWdpblN0cmluZykgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2lwMDAyVVJJKHttZXRob2QsIHBhc3N3b3JkLCBob3N0LCBwb3J0LCB0YWcsIHBsdWdpbn0pO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgeyBiNjRFbmNvZGVkVXNlckluZm8sIGhvc3QsIHBvcnQsIHBsdWdpbiwgdGFnIH0gPSB0aGlzO1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcGx1Z2luID8gYD9wbHVnaW49JHtwbHVnaW59YCA6ICcnO1xuICAgIGNvbnN0IGhhc2ggPSBTaGFkb3dzb2Nrc1VSSS5nZXRIYXNoKHRoaXMpO1xuICAgIGNvbnN0IHVyaUhvc3QgPSB0aGlzLnVyaUZvcm1hdHRlZEhvc3QoKTtcbiAgICByZXR1cm4gYHNzOi8vJHtiNjRFbmNvZGVkVXNlckluZm99QCR7dXJpSG9zdH06JHtwb3J0fS8ke3F1ZXJ5U3RyaW5nfSR7aGFzaH1gO1xuICB9XG59XG4iXX0=
