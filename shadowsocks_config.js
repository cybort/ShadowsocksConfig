"use strict";
(function iife() {
  const platformExportObj = (function detectPlatformExportObj() {
    if (typeof module !== 'undefined' && module.exports) {
      return module.exports;  // node
    } else if (typeof window !== 'undefined') {
      return window;  // browser
    }
    throw new Error('Could not detect platform global object (no window or module.exports)');
  })();
const isBrowser = typeof window !== 'undefined';
const b64Encode = isBrowser ? btoa : require('base-64').encode;
const b64Decode = isBrowser ? atob : require('base-64').decode;
const URL = isBrowser ? window.URL : require('url').URL;
const punycode = isBrowser ? window.punycode : require('punycode');
class ShadowsocksConfigError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = new.target.name;
    }
}
platformExportObj.ShadowsocksConfigError = ShadowsocksConfigError;
class InvalidConfigField extends ShadowsocksConfigError {
}
platformExportObj.InvalidConfigField = InvalidConfigField;
class InvalidUri extends ShadowsocksConfigError {
}
platformExportObj.InvalidUri = InvalidUri;
class ValidatedConfigField {
}
platformExportObj.ValidatedConfigField = ValidatedConfigField;
function throwErrorForInvalidField(name, value, reason) {
    throw new InvalidConfigField(`Invalid ${name}: ${value} ${reason || ''}`);
}
class Host extends ValidatedConfigField {
    constructor(host) {
        super();
        if (!host) {
            throwErrorForInvalidField('host', host);
        }
        if (host instanceof Host) {
            host = host.data;
        }
        host = punycode.toASCII(host);
        this.isIPv4 = Host.IPV4_PATTERN.test(host);
        this.isIPv6 = this.isIPv4 ? false : Host.IPV6_PATTERN.test(host);
        this.isHostname = this.isIPv4 || this.isIPv6 ? false : Host.HOSTNAME_PATTERN.test(host);
        if (!(this.isIPv4 || this.isIPv6 || this.isHostname)) {
            throwErrorForInvalidField('host', host);
        }
        this.data = host;
    }
}
Host.IPV4_PATTERN = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;
Host.IPV6_PATTERN = /^(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}$/i;
Host.HOSTNAME_PATTERN = /^[A-z0-9]+[A-z0-9_.-]*$/;
platformExportObj.Host = Host;
class Port extends ValidatedConfigField {
    constructor(port) {
        super();
        if (port instanceof Port) {
            port = port.data;
        }
        if (typeof port === 'number') {
            port = port.toString();
        }
        if (!Port.PATTERN.test(port)) {
            throwErrorForInvalidField('port', port);
        }
        port = Number(port);
        if (port > 65535) {
            throwErrorForInvalidField('port', port);
        }
        this.data = port;
    }
}
Port.PATTERN = /^[0-9]{1,5}$/;
platformExportObj.Port = Port;
platformExportObj.METHODS = new Set([
    'rc4-md5',
    'aes-128-gcm',
    'aes-192-gcm',
    'aes-256-gcm',
    'aes-128-cfb',
    'aes-192-cfb',
    'aes-256-cfb',
    'aes-128-ctr',
    'aes-192-ctr',
    'aes-256-ctr',
    'camellia-128-cfb',
    'camellia-192-cfb',
    'camellia-256-cfb',
    'bf-cfb',
    'chacha20-ietf-poly1305',
    'salsa20',
    'chacha20',
    'chacha20-ietf',
]);
class Method extends ValidatedConfigField {
    constructor(method) {
        super();
        if (method instanceof Method) {
            method = method.data;
        }
        if (!platformExportObj.METHODS.has(method)) {
            throwErrorForInvalidField('method', method);
        }
        this.data = method;
    }
}
platformExportObj.Method = Method;
class Password extends ValidatedConfigField {
    constructor(password) {
        super();
        this.data = password instanceof Password ? password.data : password;
    }
}
platformExportObj.Password = Password;
class Tag extends ValidatedConfigField {
    constructor(tag = '') {
        super();
        this.data = tag instanceof Tag ? tag.data : tag;
    }
}
platformExportObj.Tag = Tag;
function makeConfig(input) {
    const config = {
        host: new Host(input.host),
        port: new Port(input.port),
        method: new Method(input.method),
        password: new Password(input.password),
        tag: new Tag(input.tag),
        extra: {},
    };
    for (const key of Object.keys(input)) {
        if (!/^(host|port|method|password|tag)$/.test(key)) {
            config.extra[key] = input[key] && input[key].toString();
        }
    }
    return config;
}
platformExportObj.makeConfig = makeConfig;
platformExportObj.SHADOWSOCKS_URI = {
    PROTOCOL: 'ss:',
    getUriFormattedHost: (host) => {
        return host.isIPv6 ? `[${host.data}]` : host.data;
    },
    getHash: (tag) => {
        return tag.data ? `#${encodeURIComponent(tag.data)}` : '';
    },
    validateProtocol: (uri) => {
        if (!uri.startsWith(platformExportObj.SHADOWSOCKS_URI.PROTOCOL)) {
            throw new InvalidUri(`URI must start with "${platformExportObj.SHADOWSOCKS_URI.PROTOCOL}": ${uri}`);
        }
    },
    parse: (uri) => {
        let error;
        for (const uriType of [platformExportObj.SIP002_URI, platformExportObj.LEGACY_BASE64_URI]) {
            try {
                return uriType.parse(uri);
            }
            catch (e) {
                error = e;
            }
        }
        if (!(error instanceof InvalidUri)) {
            const originalErrorName = error.name || '(Unnamed Error)';
            const originalErrorMessage = error.message || '(no error message provided)';
            const originalErrorString = `${originalErrorName}: ${originalErrorMessage}`;
            const newErrorMessage = `Invalid input: ${uri} - Original error: ${originalErrorString}`;
            error = new InvalidUri(newErrorMessage);
        }
        throw error;
    },
};
platformExportObj.LEGACY_BASE64_URI = {
    parse: (uri) => {
        platformExportObj.SHADOWSOCKS_URI.validateProtocol(uri);
        const hashIndex = uri.indexOf('#');
        const hasTag = hashIndex !== -1;
        const b64EndIndex = hasTag ? hashIndex : uri.length;
        const tagStartIndex = hasTag ? hashIndex + 1 : uri.length;
        const tag = new Tag(decodeURIComponent(uri.substring(tagStartIndex)));
        const b64EncodedData = uri.substring('ss://'.length, b64EndIndex);
        const b64DecodedData = b64Decode(b64EncodedData);
        const atSignIndex = b64DecodedData.indexOf('@');
        if (atSignIndex === -1) {
            throw new InvalidUri(`Missing "@": ${b64DecodedData}`);
        }
        const methodAndPassword = b64DecodedData.substring(0, atSignIndex);
        const methodEndIndex = methodAndPassword.indexOf(':');
        if (methodEndIndex === -1) {
            throw new InvalidUri(`Missing password part: ${methodAndPassword}`);
        }
        const methodString = methodAndPassword.substring(0, methodEndIndex);
        const method = new Method(methodString);
        const passwordStartIndex = methodEndIndex + 1;
        const passwordString = methodAndPassword.substring(passwordStartIndex);
        const password = new Password(passwordString);
        const hostStartIndex = atSignIndex + 1;
        const hostAndPort = b64DecodedData.substring(hostStartIndex);
        const hostEndIndex = hostAndPort.lastIndexOf(':');
        if (hostEndIndex === -1) {
            throw new InvalidUri(`Missing port part: ${hostAndPort}`);
        }
        const uriFormattedHost = hostAndPort.substring(0, hostEndIndex);
        let host;
        try {
            host = new Host(uriFormattedHost);
        }
        catch (_) {
            host = new Host(uriFormattedHost.substring(1, uriFormattedHost.length - 1));
        }
        const portStartIndex = hostEndIndex + 1;
        const portString = hostAndPort.substring(portStartIndex);
        const port = new Port(portString);
        const extra = {};
        return { method, password, host, port, tag, extra };
    },
    stringify: (config) => {
        const { host, port, method, password, tag } = config;
        const hash = platformExportObj.SHADOWSOCKS_URI.getHash(tag);
        let b64EncodedData = b64Encode(`${method.data}:${password.data}@${host.data}:${port.data}`);
        const dataLength = b64EncodedData.length;
        let paddingLength = 0;
        for (; b64EncodedData[dataLength - 1 - paddingLength] === '='; paddingLength++)
            ;
        b64EncodedData = paddingLength === 0 ? b64EncodedData :
            b64EncodedData.substring(0, dataLength - paddingLength);
        return `ss://${b64EncodedData}${hash}`;
    },
};
platformExportObj.SIP002_URI = {
    parse: (uri) => {
        platformExportObj.SHADOWSOCKS_URI.validateProtocol(uri);
        const inputForUrlParser = `http${uri.substring(2)}`;
        const urlParserResult = new URL(inputForUrlParser);
        const uriFormattedHost = urlParserResult.hostname;
        const last = uriFormattedHost.length - 1;
        const brackets = uriFormattedHost[0] === '[' && uriFormattedHost[last] === ']';
        const hostString = brackets ? uriFormattedHost.substring(1, last) : uriFormattedHost;
        const host = new Host(hostString);
        const port = new Port(urlParserResult.port);
        const tag = new Tag(decodeURIComponent(urlParserResult.hash.substring(1)));
        const b64EncodedUserInfo = urlParserResult.username.replace(/%3D/g, '=');
        const b64DecodedUserInfo = b64Decode(b64EncodedUserInfo);
        const colonIdx = b64DecodedUserInfo.indexOf(':');
        if (colonIdx === -1) {
            throw new InvalidUri(`Missing password part: ${b64DecodedUserInfo}`);
        }
        const methodString = b64DecodedUserInfo.substring(0, colonIdx);
        const method = new Method(methodString);
        const passwordString = b64DecodedUserInfo.substring(colonIdx + 1);
        const password = new Password(passwordString);
        const queryParams = urlParserResult.search.substring(1).split('&');
        const extra = {};
        for (const pair of queryParams) {
            const [key, value] = pair.split('=', 2);
            if (!key)
                continue;
            extra[key] = decodeURIComponent(value || '');
        }
        return { method, password, host, port, tag, extra };
    },
    stringify: (config) => {
        const { host, port, method, password, tag, extra } = config;
        const userInfo = b64Encode(`${method.data}:${password.data}`);
        const uriHost = platformExportObj.SHADOWSOCKS_URI.getUriFormattedHost(host);
        const hash = platformExportObj.SHADOWSOCKS_URI.getHash(tag);
        let queryString = '';
        for (const key in extra) {
            if (!key)
                continue;
            queryString += (queryString ? '&' : '?') + `${key}=${encodeURIComponent(extra[key])}`;
        }
        return `ss://${userInfo}@${uriHost}:${port.data}/${queryString}${hash}`;
    },
};
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
