"use strict";
(function iife() {
  const platformExportObj = (function detectPlatformExportObj() {
    if (typeof module !== 'undefined' && module.exports) {
      return module.exports;  // node
    } else if (typeof window !== 'undefined') {
      return window;  // browser
    }
    throw new Error('Could not detect platform global object (no window or module.exports)');
  })();
const isBrowser = typeof window !== 'undefined';
const b64Encode = isBrowser ? btoa : require('base-64').encode;
const b64Decode = isBrowser ? atob : require('base-64').decode;
const URL = isBrowser ? window.URL : require('url').URL;
class ShadowsocksConfigError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = new.target.name;
    }
}
platformExportObj.ShadowsocksConfigError = ShadowsocksConfigError;
class InvalidConfigField extends ShadowsocksConfigError {
}
platformExportObj.InvalidConfigField = InvalidConfigField;
class InvalidUri extends ShadowsocksConfigError {
}
platformExportObj.InvalidUri = InvalidUri;
class ValidatedConfigField {
}
platformExportObj.ValidatedConfigField = ValidatedConfigField;
;
function throwErrorForInvalidField(name, value, reason) {
    throw new InvalidConfigField(`Invalid ${name}: ${value} ${reason || ''}`);
}
class Host extends ValidatedConfigField {
    constructor(host) {
        super();
        if (host instanceof Host) {
            host = host.data;
        }
        this.isIPv6 = Host.IPV6_PATTERN.test(host);
        if (!this.isIPv6 && !Host.IPV4_PATTERN.test(host)) {
            throwErrorForInvalidField('host', host, 'IPv4 or IPv6 address required');
        }
        this.data = host;
    }
}
Host.IPV4_PATTERN = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;
Host.IPV6_PATTERN = /^(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}$/i;
platformExportObj.Host = Host;
class Port extends ValidatedConfigField {
    constructor(port) {
        super();
        if (port instanceof Port) {
            port = port.data;
        }
        if (typeof port === 'number') {
            port = port.toString();
        }
        if (!Port.PATTERN.test(port)) {
            throwErrorForInvalidField('port', port);
        }
        port = Number(port);
        if (port > 65535) {
            throwErrorForInvalidField('port', port);
        }
        this.data = port;
    }
}
Port.PATTERN = /^[0-9]{1,5}$/;
platformExportObj.Port = Port;
platformExportObj.METHODS = new Set([
    'rc4-md5',
    'aes-128-gcm',
    'aes-192-gcm',
    'aes-256-gcm',
    'aes-128-cfb',
    'aes-192-cfb',
    'aes-256-cfb',
    'aes-128-ctr',
    'aes-192-ctr',
    'aes-256-ctr',
    'camellia-128-cfb',
    'camellia-192-cfb',
    'camellia-256-cfb',
    'bf-cfb',
    'chacha20-ietf-poly1305',
    'salsa20',
    'chacha20',
    'chacha20-ietf',
]);
class Method extends ValidatedConfigField {
    constructor(method) {
        super();
        if (method instanceof Method) {
            method = method.data;
        }
        if (!platformExportObj.METHODS.has(method)) {
            throwErrorForInvalidField('method', method);
        }
        this.data = method;
    }
}
platformExportObj.Method = Method;
class Password extends ValidatedConfigField {
    constructor(password) {
        super();
        this.data = password instanceof Password ? password.data : password;
    }
}
platformExportObj.Password = Password;
class Tag extends ValidatedConfigField {
    constructor(tag = '') {
        super();
        this.data = tag instanceof Tag ? tag.data : tag;
    }
}
platformExportObj.Tag = Tag;
class Plugin extends ValidatedConfigField {
    constructor(plugin = '') {
        super();
        this.data = plugin instanceof Plugin ? plugin.data : plugin;
    }
}
platformExportObj.Plugin = Plugin;
function makeConfig(config) {
    return {
        host: new Host(config.host),
        port: new Port(config.port),
        method: new Method(config.method),
        password: new Password(config.password),
        tag: new Tag(config.tag),
        plugin: new Plugin(config.plugin),
    };
}
platformExportObj.makeConfig = makeConfig;
platformExportObj.ShadowsocksUri = {
    PROTOCOL: 'ss:',
    getUriFormattedHost: (host) => {
        return host.isIPv6 ? `[${host.data}]` : host.data;
    },
    getHash: (tag) => {
        return tag ? `#${encodeURIComponent(tag.data)}` : '';
    },
    validateProtocol: (uri) => {
        if (!uri.startsWith(platformExportObj.ShadowsocksUri.PROTOCOL)) {
            throw new InvalidUri(`URI must start with "${platformExportObj.ShadowsocksUri.PROTOCOL}": ${uri}`);
        }
    },
    parse: (uri) => {
        let error;
        for (const UriType of [platformExportObj.LegacyBase64Uri, platformExportObj.Sip002Uri]) {
            try {
                return UriType.parse(uri);
            }
            catch (e) {
                error = error || e;
            }
        }
        if (!(error instanceof InvalidUri)) {
            const originalErrorName = error.name || '(Unnamed Error)';
            const originalErrorMessage = error.message || '(no error message provided)';
            const originalErrorString = `${originalErrorName}: ${originalErrorMessage}`;
            const newErrorMessage = `Invalid input: ${uri} - Original error: ${originalErrorString}`;
            error = new InvalidUri(newErrorMessage);
        }
        throw error;
    },
};
platformExportObj.LegacyBase64Uri = {
    parse: (uri) => {
        platformExportObj.ShadowsocksUri.validateProtocol(uri);
        const hashIndex = uri.indexOf('#');
        let b64EndIndex = hashIndex;
        let tagStartIndex = hashIndex + 1;
        if (hashIndex === -1) {
            b64EndIndex = tagStartIndex = uri.length;
        }
        const tag = new Tag(decodeURIComponent(uri.substring(tagStartIndex)));
        const b64EncodedData = uri.substring('ss://'.length, b64EndIndex);
        const b64DecodedData = b64Decode(b64EncodedData);
        const atSignIndex = b64DecodedData.indexOf('@');
        if (atSignIndex === -1) {
            throw new InvalidUri(`Missing "@": ${b64DecodedData}`);
        }
        const methodAndPassword = b64DecodedData.substring(0, atSignIndex);
        const methodEndIndex = methodAndPassword.indexOf(':');
        if (methodEndIndex === -1) {
            throw new InvalidUri(`Missing password part: ${methodAndPassword}`);
        }
        const methodString = methodAndPassword.substring(0, methodEndIndex);
        const method = new Method(methodString);
        const passwordStartIndex = methodEndIndex + 1;
        const passwordString = methodAndPassword.substring(passwordStartIndex);
        const password = new Password(passwordString);
        const hostStartIndex = atSignIndex + 1;
        const hostAndPort = b64DecodedData.substring(hostStartIndex);
        const hostEndIndex = hostAndPort.lastIndexOf(':');
        if (hostEndIndex === -1) {
            throw new InvalidUri(`Missing port part: ${hostAndPort}`);
        }
        const uriFormattedHost = hostAndPort.substring(0, hostEndIndex);
        let host;
        try {
            host = new Host(uriFormattedHost);
        }
        catch (_) {
            host = new Host(uriFormattedHost.substring(1, uriFormattedHost.length - 1));
        }
        const portStartIndex = hostEndIndex + 1;
        const portString = hostAndPort.substring(portStartIndex);
        const port = new Port(portString);
        return { method, password, host, port, tag };
    },
    stringify: (config) => {
        const { method, password, host, port } = config;
        const hash = platformExportObj.ShadowsocksUri.getHash(config.tag);
        let b64EncodedData = b64Encode(`${method.data}:${password.data}@${host.data}:${port.data}`);
        const dataLength = b64EncodedData.length;
        let paddingLength = 0;
        for (; b64EncodedData[dataLength - 1 - paddingLength] === '='; paddingLength++)
            ;
        b64EncodedData = paddingLength === 0 ? b64EncodedData :
            b64EncodedData.substring(0, dataLength - paddingLength);
        return `ss://${b64EncodedData}${hash}`;
    },
};
platformExportObj.Sip002Uri = {
    parse: (uri) => {
        platformExportObj.ShadowsocksUri.validateProtocol(uri);
        const inputForUrlParser = `http${uri.substring(2)}`;
        const urlParserResult = new URL(inputForUrlParser);
        const uriFormattedHost = urlParserResult.hostname;
        const last = uriFormattedHost.length - 1;
        const brackets = uriFormattedHost[0] === '[' && uriFormattedHost[last] === ']';
        const hostString = brackets ? uriFormattedHost.substring(1, last) : uriFormattedHost;
        const host = new Host(hostString);
        const port = new Port(urlParserResult.port);
        const tag = new Tag(decodeURIComponent(urlParserResult.hash.substring(1)));
        const b64EncodedUserInfo = urlParserResult.username.replace(/%3D/g, '=');
        const b64DecodedUserInfo = b64Decode(b64EncodedUserInfo);
        const colonIdx = b64DecodedUserInfo.indexOf(':');
        if (colonIdx === -1) {
            throw new InvalidUri(`Missing password part: ${b64DecodedUserInfo}`);
        }
        const methodString = b64DecodedUserInfo.substring(0, colonIdx);
        const method = new Method(methodString);
        const passwordString = b64DecodedUserInfo.substring(colonIdx + 1);
        const password = new Password(passwordString);
        let plugin;
        if (urlParserResult.searchParams) {
            const pluginString = urlParserResult.searchParams.get('plugin');
            plugin = pluginString ? new Plugin(pluginString) : undefined;
        }
        return { method, password, host, port, tag, plugin };
    },
    stringify: (config) => {
        const { host, port, method, password } = config;
        const userInfo = b64Encode(`${method.data}:${password.data}`);
        const uriHost = platformExportObj.ShadowsocksUri.getUriFormattedHost(host);
        const hash = platformExportObj.ShadowsocksUri.getHash(config.tag);
        const queryString = config.plugin && config.plugin.data ? `?plugin=${config.plugin.data}` : '';
        return `ss://${userInfo}@${uriHost}:${port.data}/${queryString}${hash}`;
    },
};
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
