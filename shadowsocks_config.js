"use strict";
(function iife() {
  const platformExportObj = (function detectPlatformExportObj() {
    if (typeof module !== 'undefined' && module.exports) {
      return module.exports;  // node
    } else if (typeof window !== 'undefined') {
      return window;  // browser
    }
    throw new Error('Could not detect platform global object (no window or module.exports)');
  })();
const isBrowser = typeof window !== 'undefined';
const b64Encode = isBrowser ? btoa : require('base-64').encode;
const b64Decode = isBrowser ? atob : require('base-64').decode;
const URL = isBrowser ? window.URL : require('url').URL;
class ShadowsocksConfigError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = new.target.name;
    }
}
platformExportObj.ShadowsocksConfigError = ShadowsocksConfigError;
class InvalidConfigField extends ShadowsocksConfigError {
}
platformExportObj.InvalidConfigField = InvalidConfigField;
class InvalidUri extends ShadowsocksConfigError {
}
platformExportObj.InvalidUri = InvalidUri;
class ValidatedConfigField {
}
platformExportObj.ValidatedConfigField = ValidatedConfigField;
;
function throwErrorForInvalidField(name, value, reason) {
    throw new InvalidConfigField(`Invalid ${name}: ${value} ${reason || ''}`);
}
class Host extends ValidatedConfigField {
    constructor(host) {
        super();
        if (host instanceof Host) {
            host = host.data;
        }
        this.isIPv6 = Host.IPV6_PATTERN.test(host);
        if (!this.isIPv6 && !Host.IPV4_PATTERN.test(host)) {
            throwErrorForInvalidField('host', host, 'IPv4 or IPv6 address required');
        }
        this.data = host;
    }
}
Host.IPV4_PATTERN = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;
Host.IPV6_PATTERN = /^(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}$/i;
platformExportObj.Host = Host;
class Port extends ValidatedConfigField {
    constructor(port) {
        super();
        if (port instanceof Port) {
            port = port.data;
        }
        if (typeof port === 'number') {
            port = port.toString();
        }
        if (!Port.PATTERN.test(port)) {
            throwErrorForInvalidField('port', port);
        }
        port = Number(port);
        if (port > 65535) {
            throwErrorForInvalidField('port', port);
        }
        this.data = port;
    }
}
Port.PATTERN = /^[0-9]{1,5}$/;
platformExportObj.Port = Port;
platformExportObj.METHODS = new Set([
    'rc4-md5',
    'aes-128-gcm',
    'aes-192-gcm',
    'aes-256-gcm',
    'aes-128-cfb',
    'aes-192-cfb',
    'aes-256-cfb',
    'aes-128-ctr',
    'aes-192-ctr',
    'aes-256-ctr',
    'camellia-128-cfb',
    'camellia-192-cfb',
    'camellia-256-cfb',
    'bf-cfb',
    'chacha20-ietf-poly1305',
    'salsa20',
    'chacha20',
    'chacha20-ietf',
]);
class Method extends ValidatedConfigField {
    constructor(method) {
        super();
        if (method instanceof Method) {
            method = method.data;
        }
        if (!platformExportObj.METHODS.has(method)) {
            throwErrorForInvalidField('method', method);
        }
        this.data = method;
    }
}
platformExportObj.Method = Method;
class Password extends ValidatedConfigField {
    constructor(password) {
        super();
        this.data = password instanceof Password ? password.data : password;
    }
}
platformExportObj.Password = Password;
class Tag extends ValidatedConfigField {
    constructor(tag = '') {
        super();
        this.data = tag instanceof Tag ? tag.data : tag;
    }
}
platformExportObj.Tag = Tag;
class Plugin extends ValidatedConfigField {
    constructor(plugin = '') {
        super();
        this.data = plugin instanceof Plugin ? plugin.data : plugin;
    }
}
platformExportObj.Plugin = Plugin;
function makeConfig(config) {
    return {
        host: new Host(config.host),
        port: new Port(config.port),
        method: new Method(config.method),
        password: new Password(config.password),
        tag: new Tag(config.tag),
        plugin: new Plugin(config.plugin),
    };
}
platformExportObj.makeConfig = makeConfig;
class ShadowsocksUri {
    constructor(config) {
        this.config = config;
    }
    static getUriFormattedHost(host) {
        return host.isIPv6 ? `[${host.data}]` : host.data;
    }
    static getHash(tag) {
        return tag ? `#${encodeURIComponent(tag.data)}` : '';
    }
    static validateProtocol(uri) {
        if (!uri.startsWith(ShadowsocksUri.PROTOCOL)) {
            throw new InvalidUri(`URI must start with "${ShadowsocksUri.PROTOCOL}": ${uri}`);
        }
    }
    static parse(uri) {
        let error;
        for (const UriType of [LegacyBase64Uri, Sip002Uri]) {
            try {
                return UriType.parse(uri);
            }
            catch (e) {
                error = error || e;
            }
        }
        if (!(error instanceof InvalidUri)) {
            const originalErrorName = error.name || '(Unnamed Error)';
            const originalErrorMessage = error.message || '(no error message provided)';
            const originalErrorString = `${originalErrorName}: ${originalErrorMessage}`;
            const newErrorMessage = `Invalid input: ${uri} - Original error: ${originalErrorString}`;
            error = new InvalidUri(newErrorMessage);
        }
        throw error;
    }
}
ShadowsocksUri.PROTOCOL = 'ss:';
platformExportObj.ShadowsocksUri = ShadowsocksUri;
class LegacyBase64Uri extends ShadowsocksUri {
    static parse(uri) {
        ShadowsocksUri.validateProtocol(uri);
        const hashIndex = uri.indexOf('#');
        let b64EndIndex = hashIndex;
        let tagStartIndex = hashIndex + 1;
        if (hashIndex === -1) {
            b64EndIndex = tagStartIndex = uri.length;
        }
        const tag = new Tag(decodeURIComponent(uri.substring(tagStartIndex)));
        const b64EncodedData = uri.substring('ss://'.length, b64EndIndex);
        const b64DecodedData = b64Decode(b64EncodedData);
        const atSignIndex = b64DecodedData.indexOf('@');
        if (atSignIndex === -1) {
            throw new InvalidUri(`Missing "@": ${b64DecodedData}`);
        }
        const methodAndPassword = b64DecodedData.substring(0, atSignIndex);
        const methodEndIndex = methodAndPassword.indexOf(':');
        if (methodEndIndex === -1) {
            throw new InvalidUri(`Missing password part: ${methodAndPassword}`);
        }
        const methodString = methodAndPassword.substring(0, methodEndIndex);
        const method = new Method(methodString);
        const passwordStartIndex = methodEndIndex + 1;
        const passwordString = methodAndPassword.substring(passwordStartIndex);
        const password = new Password(passwordString);
        const hostStartIndex = atSignIndex + 1;
        const hostAndPort = b64DecodedData.substring(hostStartIndex);
        const hostEndIndex = hostAndPort.lastIndexOf(':');
        if (hostEndIndex === -1) {
            throw new InvalidUri(`Missing port part: ${hostAndPort}`);
        }
        const uriFormattedHost = hostAndPort.substring(0, hostEndIndex);
        let host;
        try {
            host = new Host(uriFormattedHost);
        }
        catch (_) {
            host = new Host(uriFormattedHost.substring(1, uriFormattedHost.length - 1));
        }
        const portStartIndex = hostEndIndex + 1;
        const portString = hostAndPort.substring(portStartIndex);
        const port = new Port(portString);
        return { method, password, host, port, tag };
    }
    static stringify(config) {
        const { method, password, host, port } = config;
        const hash = ShadowsocksUri.getHash(config.tag);
        let b64EncodedData = b64Encode(`${method.data}:${password.data}@${host.data}:${port.data}`);
        const dataLength = b64EncodedData.length;
        let paddingLength = 0;
        for (; b64EncodedData[dataLength - 1 - paddingLength] === '='; paddingLength++)
            ;
        b64EncodedData = paddingLength === 0 ? b64EncodedData :
            b64EncodedData.substring(0, dataLength - paddingLength);
        return `ss://${b64EncodedData}${hash}`;
    }
}
platformExportObj.LegacyBase64Uri = LegacyBase64Uri;
class Sip002Uri extends ShadowsocksUri {
    static parse(uri) {
        ShadowsocksUri.validateProtocol(uri);
        const inputForUrlParser = `http${uri.substring(2)}`;
        const urlParserResult = new URL(inputForUrlParser);
        const uriFormattedHost = urlParserResult.hostname;
        const last = uriFormattedHost.length - 1;
        const brackets = uriFormattedHost[0] === '[' && uriFormattedHost[last] === ']';
        const hostString = brackets ? uriFormattedHost.substring(1, last) : uriFormattedHost;
        const host = new Host(hostString);
        const port = new Port(urlParserResult.port);
        const tag = new Tag(decodeURIComponent(urlParserResult.hash.substring(1)));
        const b64EncodedUserInfo = urlParserResult.username.replace(/%3D/g, '=');
        const b64DecodedUserInfo = b64Decode(b64EncodedUserInfo);
        const colonIdx = b64DecodedUserInfo.indexOf(':');
        if (colonIdx === -1) {
            throw new InvalidUri(`Missing password part: ${b64DecodedUserInfo}`);
        }
        const methodString = b64DecodedUserInfo.substring(0, colonIdx);
        const method = new Method(methodString);
        const passwordString = b64DecodedUserInfo.substring(colonIdx + 1);
        const password = new Password(passwordString);
        let plugin;
        if (urlParserResult.searchParams) {
            const pluginString = urlParserResult.searchParams.get('plugin');
            plugin = pluginString ? new Plugin(pluginString) : undefined;
        }
        return { method, password, host, port, tag, plugin };
    }
    static stringify(config) {
        const { host, port, method, password } = config;
        const userInfo = b64Encode(`${method.data}:${password.data}`);
        const uriHost = ShadowsocksUri.getUriFormattedHost(host);
        const hash = ShadowsocksUri.getHash(config.tag);
        const queryString = config.plugin && config.plugin.data ? `?plugin=${config.plugin.data}` : '';
        return `ss://${userInfo}@${uriHost}:${port.data}/${queryString}${hash}`;
    }
}
platformExportObj.Sip002Uri = Sip002Uri;
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYWRvd3NvY2tzX2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE1BQU0sU0FBUyxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUNoRCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUMvRCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUMvRCxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFHeEQsNEJBQW9DLFNBQVEsS0FBSztJQUMvQyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzlCLENBQUM7Q0FDRjtBQU5ELHdEQU1DO0FBRUQsd0JBQWdDLFNBQVEsc0JBQXNCO0NBQUc7QUFBakUsZ0RBQWlFO0FBRWpFLGdCQUF3QixTQUFRLHNCQUFzQjtDQUFHO0FBQXpELGdDQUF5RDtBQUl6RDtDQUE2QztBQUE3QyxvREFBNkM7QUFBQSxDQUFDO0FBRTlDLG1DQUFtQyxJQUFZLEVBQUUsS0FBVSxFQUFFLE1BQWU7SUFDMUUsTUFBTSxJQUFJLGtCQUFrQixDQUFDLFdBQVcsSUFBSSxLQUFLLEtBQUssSUFBSSxNQUFNLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM1RSxDQUFDO0FBRUQsVUFBa0IsU0FBUSxvQkFBb0I7SUFNNUMsWUFBWSxJQUFtQjtRQUM3QixLQUFLLEVBQUUsQ0FBQztRQUNSLEVBQUUsQ0FBQyxDQUFDLElBQUksWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25CLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRCx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLCtCQUErQixDQUFDLENBQUM7UUFDM0UsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7O0FBZmEsaUJBQVksR0FBRyxpQ0FBaUMsQ0FBQztBQUNqRCxpQkFBWSxHQUFHLHVDQUF1QyxDQUFDO0FBRnZFLG9CQWlCQztBQUVELFVBQWtCLFNBQVEsb0JBQW9CO0lBSTVDLFlBQVksSUFBNEI7UUFDdEMsS0FBSyxFQUFFLENBQUM7UUFDUixFQUFFLENBQUMsQ0FBQyxJQUFJLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNuQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUU3QixJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3pCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3Qix5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUdELElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDakIseUJBQXlCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDOztBQXRCc0IsWUFBTyxHQUFHLGNBQWMsQ0FBQztBQURsRCxvQkF3QkM7QUFJWSxRQUFBLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUM3QixTQUFTO0lBQ1QsYUFBYTtJQUNiLGFBQWE7SUFDYixhQUFhO0lBQ2IsYUFBYTtJQUNiLGFBQWE7SUFDYixhQUFhO0lBQ2IsYUFBYTtJQUNiLGFBQWE7SUFDYixhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLHdCQUF3QjtJQUN4QixTQUFTO0lBQ1QsVUFBVTtJQUNWLGVBQWU7Q0FDaEIsQ0FBQyxDQUFDO0FBRUgsWUFBb0IsU0FBUSxvQkFBb0I7SUFFOUMsWUFBWSxNQUF1QjtRQUNqQyxLQUFLLEVBQUUsQ0FBQztRQUNSLEVBQUUsQ0FBQyxDQUFDLE1BQU0sWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLGVBQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQUNGO0FBWkQsd0JBWUM7QUFLRCxjQUFzQixTQUFRLG9CQUFvQjtJQUdoRCxZQUFZLFFBQTJCO1FBQ3JDLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLFlBQVksUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDdEUsQ0FBQztDQUNGO0FBUEQsNEJBT0M7QUFFRCxTQUFpQixTQUFRLG9CQUFvQjtJQUczQyxZQUFZLE1BQW9CLEVBQUU7UUFDaEMsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNsRCxDQUFDO0NBQ0Y7QUFQRCxrQkFPQztBQUVELFlBQW9CLFNBQVEsb0JBQW9CO0lBRzlDLFlBQVksU0FBMEIsRUFBRTtRQUN0QyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxZQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzlELENBQUM7Q0FDRjtBQVBELHdCQU9DO0FBV0Qsb0JBQTJCLE1BQTRCO0lBR3JELE1BQU0sQ0FBQztRQUNMLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSyxDQUFDO1FBQzVCLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSyxDQUFDO1FBQzVCLE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTyxDQUFDO1FBQ2xDLFFBQVEsRUFBRSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFDO1FBQ3hDLEdBQUcsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0tBQ2xDLENBQUM7QUFDSixDQUFDO0FBWEQsZ0NBV0M7QUFHRDtJQUdFLFlBQTRCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUcsQ0FBQztJQUk5QyxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBVTtRQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDcEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBUztRQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFXO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sSUFBSSxVQUFVLENBQUMsd0JBQXdCLGNBQWMsQ0FBQyxRQUFRLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNuRixDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBVztRQUN0QixJQUFJLEtBQXdCLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsTUFBTSxPQUFPLElBQUksQ0FBQyxlQUFlLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQztnQkFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM1QixDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxLQUFLLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUNyQixDQUFDO1FBQ0gsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE1BQU0saUJBQWlCLEdBQUcsS0FBTSxDQUFDLElBQUssSUFBSSxpQkFBaUIsQ0FBQztZQUM1RCxNQUFNLG9CQUFvQixHQUFHLEtBQU0sQ0FBQyxPQUFRLElBQUksNkJBQTZCLENBQUM7WUFDOUUsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLGlCQUFpQixLQUFLLG9CQUFvQixFQUFFLENBQUM7WUFDNUUsTUFBTSxlQUFlLEdBQUcsa0JBQWtCLEdBQUcsc0JBQXNCLG1CQUFtQixFQUFFLENBQUM7WUFDekYsS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFDRCxNQUFNLEtBQUssQ0FBQztJQUNkLENBQUM7O0FBckNzQix1QkFBUSxHQUFHLEtBQUssQ0FBQztBQUQxQyx3Q0F1Q0M7QUFHRCxxQkFBNkIsU0FBUSxjQUFjO0lBQ2pELE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBVztRQUN0QixjQUFjLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDNUIsSUFBSSxhQUFhLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLFdBQVcsR0FBRyxhQUFhLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUMzQyxDQUFDO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNqRCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxJQUFJLFVBQVUsQ0FBQyxnQkFBZ0IsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQ0QsTUFBTSxpQkFBaUIsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNuRSxNQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEQsRUFBRSxDQUFDLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLElBQUksVUFBVSxDQUFDLDBCQUEwQixpQkFBaUIsRUFBRSxDQUFDLENBQUM7UUFDdEUsQ0FBQztRQUNELE1BQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEMsTUFBTSxrQkFBa0IsR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sY0FBYyxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sY0FBYyxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDdkMsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM3RCxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxDQUFDLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxJQUFJLFVBQVUsQ0FBQyxzQkFBc0IsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUM1RCxDQUFDO1FBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNoRSxJQUFJLElBQVUsQ0FBQztRQUNmLElBQUksQ0FBQztZQUNILElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBR1gsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUUsQ0FBQztRQUNELE1BQU0sY0FBYyxHQUFHLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDeEMsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN6RCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBYztRQUM3QixNQUFNLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzlDLE1BQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELElBQUksY0FBYyxHQUFHLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzVGLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUM7UUFDekMsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLEtBQUssR0FBRyxFQUFFLGFBQWEsRUFBRTtZQUFDLENBQUM7UUFDaEYsY0FBYyxHQUFHLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ25ELGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFVBQVUsR0FBRyxhQUFhLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsUUFBUSxjQUFjLEdBQUcsSUFBSSxFQUFFLENBQUM7SUFDekMsQ0FBQztDQUNGO0FBMURELDBDQTBEQztBQVFELGVBQXVCLFNBQVEsY0FBYztJQUMzQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQVc7UUFDdEIsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBR3JDLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFcEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNuRCxNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUM7UUFFbEQsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUN6QyxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDO1FBQy9FLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7UUFDckYsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRSxNQUFNLGtCQUFrQixHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV6RSxNQUFNLGtCQUFrQixHQUFHLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sUUFBUSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqRCxFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sSUFBSSxVQUFVLENBQUMsMEJBQTBCLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUN2RSxDQUFDO1FBQ0QsTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvRCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4QyxNQUFNLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzlDLElBQUksTUFBMEIsQ0FBQztRQUMvQixFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoRSxNQUFNLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQy9ELENBQUM7UUFDRCxNQUFNLENBQUMsRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQWM7UUFDN0IsTUFBTSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBQyxHQUFHLE1BQU0sQ0FBQztRQUM5QyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzlELE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RCxNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoRCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMvRixNQUFNLENBQUMsUUFBUSxRQUFRLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksV0FBVyxHQUFHLElBQUksRUFBRSxDQUFDO0lBQzFFLENBQUM7Q0FDRjtBQTNDRCw4QkEyQ0MiLCJmaWxlIjoic2hhZG93c29ja3NfY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJub2RlXCIgLz5cblxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBiNjRFbmNvZGUgPSBpc0Jyb3dzZXIgPyBidG9hIDogcmVxdWlyZSgnYmFzZS02NCcpLmVuY29kZTtcbmNvbnN0IGI2NERlY29kZSA9IGlzQnJvd3NlciA/IGF0b2IgOiByZXF1aXJlKCdiYXNlLTY0JykuZGVjb2RlO1xuY29uc3QgVVJMID0gaXNCcm93c2VyID8gd2luZG93LlVSTCA6IHJlcXVpcmUoJ3VybCcpLlVSTDtcblxuLy8gQ3VzdG9tIGVycm9yIGJhc2UgY2xhc3NcbmV4cG9ydCBjbGFzcyBTaGFkb3dzb2Nrc0NvbmZpZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTsgIC8vICdFcnJvcicgYnJlYWtzIHByb3RvdHlwZSBjaGFpbiBoZXJlIGlmIHRoaXMgaXMgdHJhbnNwaWxlZCB0byBlczVcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpOyAgLy8gcmVzdG9yZSBwcm90b3R5cGUgY2hhaW5cbiAgICB0aGlzLm5hbWUgPSBuZXcudGFyZ2V0Lm5hbWU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludmFsaWRDb25maWdGaWVsZCBleHRlbmRzIFNoYWRvd3NvY2tzQ29uZmlnRXJyb3Ige31cblxuZXhwb3J0IGNsYXNzIEludmFsaWRVcmkgZXh0ZW5kcyBTaGFkb3dzb2Nrc0NvbmZpZ0Vycm9yIHt9XG5cbi8vIFNlbGYtdmFsaWRhdGluZy9ub3JtYWxpemluZyBjb25maWcgZGF0YSB0eXBlcyBpbXBsZW1lbnQgdGhpcyBWYWxpZGF0ZWRDb25maWdGaWVsZCBpbnRlcmZhY2UuXG4vLyBDb25zdHJ1Y3RvcnMgdGFrZSBzb21lIGRhdGEsIHZhbGlkYXRlLCBub3JtYWxpemUsIGFuZCBzdG9yZSBpZiB2YWxpZCwgb3IgdGhyb3cgb3RoZXJ3aXNlLlxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZhbGlkYXRlZENvbmZpZ0ZpZWxkIHt9O1xuXG5mdW5jdGlvbiB0aHJvd0Vycm9yRm9ySW52YWxpZEZpZWxkKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgcmVhc29uPzogc3RyaW5nKSB7XG4gIHRocm93IG5ldyBJbnZhbGlkQ29uZmlnRmllbGQoYEludmFsaWQgJHtuYW1lfTogJHt2YWx1ZX0gJHtyZWFzb24gfHwgJyd9YCk7XG59XG5cbmV4cG9ydCBjbGFzcyBIb3N0IGV4dGVuZHMgVmFsaWRhdGVkQ29uZmlnRmllbGQge1xuICBwdWJsaWMgc3RhdGljIElQVjRfUEFUVEVSTiA9IC9eKD86WzAtOV17MSwzfVxcLil7M31bMC05XXsxLDN9JC87XG4gIHB1YmxpYyBzdGF0aWMgSVBWNl9QQVRURVJOID0gL14oPzpbQS1GMC05XXsxLDR9Oil7N31bQS1GMC05XXsxLDR9JC9pO1xuICBwdWJsaWMgcmVhZG9ubHkgZGF0YTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgaXNJUHY2OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKGhvc3Q6IEhvc3QgfCBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChob3N0IGluc3RhbmNlb2YgSG9zdCkge1xuICAgICAgaG9zdCA9IGhvc3QuZGF0YTtcbiAgICB9XG4gICAgdGhpcy5pc0lQdjYgPSBIb3N0LklQVjZfUEFUVEVSTi50ZXN0KGhvc3QpO1xuICAgIGlmICghdGhpcy5pc0lQdjYgJiYgIUhvc3QuSVBWNF9QQVRURVJOLnRlc3QoaG9zdCkpIHtcbiAgICAgIHRocm93RXJyb3JGb3JJbnZhbGlkRmllbGQoJ2hvc3QnLCBob3N0LCAnSVB2NCBvciBJUHY2IGFkZHJlc3MgcmVxdWlyZWQnKTtcbiAgICB9XG4gICAgdGhpcy5kYXRhID0gaG9zdDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUG9ydCBleHRlbmRzIFZhbGlkYXRlZENvbmZpZ0ZpZWxkIHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBQQVRURVJOID0gL15bMC05XXsxLDV9JC87XG4gIHB1YmxpYyByZWFkb25seSBkYXRhOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocG9ydDogUG9ydCB8IHN0cmluZyB8IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKHBvcnQgaW5zdGFuY2VvZiBQb3J0KSB7XG4gICAgICBwb3J0ID0gcG9ydC5kYXRhO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBvcnQgPT09ICdudW1iZXInKSB7XG4gICAgICAvLyBTdHJpbmdpZnkgaW4gY2FzZSBuZWdhdGl2ZSBvciBmbG9hdGluZyBwb2ludCAtPiB0aGUgcmVnZXggdGVzdCBiZWxvdyB3aWxsIGNhdGNoLlxuICAgICAgcG9ydCA9IHBvcnQudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKCFQb3J0LlBBVFRFUk4udGVzdChwb3J0KSkge1xuICAgICAgdGhyb3dFcnJvckZvckludmFsaWRGaWVsZCgncG9ydCcsIHBvcnQpO1xuICAgIH1cbiAgICAvLyBDb3VsZCBleGNlZWQgdGhlIG1heGltdW0gcG9ydCBudW1iZXIsIHNvIGNvbnZlcnQgdG8gTnVtYmVyIHRvIGNoZWNrLiBDb3VsZCBhbHNvIGhhdmUgbGVhZGluZ1xuICAgIC8vIHplcm9zLiBDb252ZXJ0aW5nIHRvIE51bWJlciBkcm9wcyB0aG9zZSwgc28gd2UgZ2V0IG5vcm1hbGl6YXRpb24gZm9yIGZyZWUuIDopXG4gICAgcG9ydCA9IE51bWJlcihwb3J0KTtcbiAgICBpZiAocG9ydCA+IDY1NTM1KSB7XG4gICAgICB0aHJvd0Vycm9yRm9ySW52YWxpZEZpZWxkKCdwb3J0JywgcG9ydCk7XG4gICAgfVxuICAgIHRoaXMuZGF0YSA9IHBvcnQ7XG4gIH1cbn1cblxuLy8gQSBtZXRob2QgdmFsdWUgbXVzdCBleGFjdGx5IG1hdGNoIGFuIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBrbm93biBjaXBoZXJzLlxuLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vc2hhZG93c29ja3Mvc2hhZG93c29ja3MtbGliZXYvYmxvYi8xMGEyZDNlMy9jb21wbGV0aW9ucy9iYXNoL3NzLXJlZGlyI0w1XG5leHBvcnQgY29uc3QgTUVUSE9EUyA9IG5ldyBTZXQoW1xuICAncmM0LW1kNScsXG4gICdhZXMtMTI4LWdjbScsXG4gICdhZXMtMTkyLWdjbScsXG4gICdhZXMtMjU2LWdjbScsXG4gICdhZXMtMTI4LWNmYicsXG4gICdhZXMtMTkyLWNmYicsXG4gICdhZXMtMjU2LWNmYicsXG4gICdhZXMtMTI4LWN0cicsXG4gICdhZXMtMTkyLWN0cicsXG4gICdhZXMtMjU2LWN0cicsXG4gICdjYW1lbGxpYS0xMjgtY2ZiJyxcbiAgJ2NhbWVsbGlhLTE5Mi1jZmInLFxuICAnY2FtZWxsaWEtMjU2LWNmYicsXG4gICdiZi1jZmInLFxuICAnY2hhY2hhMjAtaWV0Zi1wb2x5MTMwNScsXG4gICdzYWxzYTIwJyxcbiAgJ2NoYWNoYTIwJyxcbiAgJ2NoYWNoYTIwLWlldGYnLFxuXSk7XG5cbmV4cG9ydCBjbGFzcyBNZXRob2QgZXh0ZW5kcyBWYWxpZGF0ZWRDb25maWdGaWVsZCB7XG4gIHB1YmxpYyByZWFkb25seSBkYXRhOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKG1ldGhvZDogTWV0aG9kIHwgc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAobWV0aG9kIGluc3RhbmNlb2YgTWV0aG9kKSB7XG4gICAgICBtZXRob2QgPSBtZXRob2QuZGF0YTtcbiAgICB9XG4gICAgaWYgKCFNRVRIT0RTLmhhcyhtZXRob2QpKSB7XG4gICAgICB0aHJvd0Vycm9yRm9ySW52YWxpZEZpZWxkKCdtZXRob2QnLCBtZXRob2QpO1xuICAgIH1cbiAgICB0aGlzLmRhdGEgPSBtZXRob2Q7XG4gIH1cbn1cblxuLy8gQ3VycmVudGx5IG5vIHNhbml0aXphdGlvbiBpcyBwZXJmb3JtZWQgZm9yIFBhc3N3b3JkLCBUYWcsIG9yIFBsdWdpbi4gQ2xpZW50IGNvZGUgaXMgcmVzcG9uc2libGVcbi8vIGZvciBzYW5pdGl6aW5nIHRoZXNlIHZhbHVlcyB3aGVuIHJlY2VpdmVkIGZyb20gdW50cnVzdGVkIGlucHV0LlxuLy8gVE9ETzogRG9jdW1lbnQgdGhpcyBpbiB0aGUgUkVBRE1FLlxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkIGV4dGVuZHMgVmFsaWRhdGVkQ29uZmlnRmllbGQge1xuICBwdWJsaWMgcmVhZG9ubHkgZGF0YTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHBhc3N3b3JkOiBQYXNzd29yZCB8IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kYXRhID0gcGFzc3dvcmQgaW5zdGFuY2VvZiBQYXNzd29yZCA/IHBhc3N3b3JkLmRhdGEgOiBwYXNzd29yZDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFnIGV4dGVuZHMgVmFsaWRhdGVkQ29uZmlnRmllbGQge1xuICBwdWJsaWMgcmVhZG9ubHkgZGF0YTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHRhZzogVGFnIHwgc3RyaW5nID0gJycpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGF0YSA9IHRhZyBpbnN0YW5jZW9mIFRhZyA/IHRhZy5kYXRhIDogdGFnO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQbHVnaW4gZXh0ZW5kcyBWYWxpZGF0ZWRDb25maWdGaWVsZCB7XG4gIHB1YmxpYyByZWFkb25seSBkYXRhOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4gfCBzdHJpbmcgPSAnJykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kYXRhID0gcGx1Z2luIGluc3RhbmNlb2YgUGx1Z2luID8gcGx1Z2luLmRhdGEgOiBwbHVnaW47XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xuICBob3N0OiBIb3N0O1xuICBwb3J0OiBQb3J0O1xuICBtZXRob2Q6IE1ldGhvZDtcbiAgcGFzc3dvcmQ6IFBhc3N3b3JkO1xuICB0YWc/OiBUYWc7XG4gIHBsdWdpbj86IFBsdWdpbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VDb25maWcoY29uZmlnOiB7W2tleTogc3RyaW5nXTogYW55fSk6IENvbmZpZyB7XG4gIC8vIFVzZSBcIiFcIiBmb3IgdGhlIHJlcXVpcmVkIGZpZWxkcyB0byB0ZWxsIHRzYyB0aGF0IHdlIGhhbmRsZSB1bmRlZmluZWQgaW4gdGhlXG4gIC8vIFZhbGlkYXRlZENvbmZpZ0ZpZWxkcyB3ZSBjYWxsOyB0c2MgY2FuJ3QgZmlndXJlIHRoYXQgb3V0IG90aGVyd2lzZS5cbiAgcmV0dXJuIHtcbiAgICBob3N0OiBuZXcgSG9zdChjb25maWcuaG9zdCEpLFxuICAgIHBvcnQ6IG5ldyBQb3J0KGNvbmZpZy5wb3J0ISksXG4gICAgbWV0aG9kOiBuZXcgTWV0aG9kKGNvbmZpZy5tZXRob2QhKSxcbiAgICBwYXNzd29yZDogbmV3IFBhc3N3b3JkKGNvbmZpZy5wYXNzd29yZCEpLFxuICAgIHRhZzogbmV3IFRhZyhjb25maWcudGFnKSxcbiAgICBwbHVnaW46IG5ldyBQbHVnaW4oY29uZmlnLnBsdWdpbiksXG4gIH07XG59XG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNoYWRvd3NvY2tzVXJpIHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBQUk9UT0NPTCA9ICdzczonO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBjb25maWc6IENvbmZpZykge31cblxuICAvL2Fic3RyYWN0IHRvU3RyaW5nKCk6IHN0cmluZztcblxuICBzdGF0aWMgZ2V0VXJpRm9ybWF0dGVkSG9zdChob3N0OiBIb3N0KSB7XG4gICAgcmV0dXJuIGhvc3QuaXNJUHY2ID8gYFske2hvc3QuZGF0YX1dYCA6IGhvc3QuZGF0YTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRIYXNoKHRhZz86IFRhZykge1xuICAgIHJldHVybiB0YWcgPyBgIyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRhZy5kYXRhKX1gIDogJyc7XG4gIH1cblxuICBzdGF0aWMgdmFsaWRhdGVQcm90b2NvbCh1cmk6IHN0cmluZykge1xuICAgIGlmICghdXJpLnN0YXJ0c1dpdGgoU2hhZG93c29ja3NVcmkuUFJPVE9DT0wpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFVyaShgVVJJIG11c3Qgc3RhcnQgd2l0aCBcIiR7U2hhZG93c29ja3NVcmkuUFJPVE9DT0x9XCI6ICR7dXJpfWApO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBwYXJzZSh1cmk6IHN0cmluZyk6IENvbmZpZyB7XG4gICAgbGV0IGVycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcbiAgICBmb3IgKGNvbnN0IFVyaVR5cGUgb2YgW0xlZ2FjeUJhc2U2NFVyaSwgU2lwMDAyVXJpXSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFVyaVR5cGUucGFyc2UodXJpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3IgPSBlcnJvciB8fCBlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEludmFsaWRVcmkpKSB7XG4gICAgICBjb25zdCBvcmlnaW5hbEVycm9yTmFtZSA9IGVycm9yIS5uYW1lISB8fCAnKFVubmFtZWQgRXJyb3IpJztcbiAgICAgIGNvbnN0IG9yaWdpbmFsRXJyb3JNZXNzYWdlID0gZXJyb3IhLm1lc3NhZ2UhIHx8ICcobm8gZXJyb3IgbWVzc2FnZSBwcm92aWRlZCknO1xuICAgICAgY29uc3Qgb3JpZ2luYWxFcnJvclN0cmluZyA9IGAke29yaWdpbmFsRXJyb3JOYW1lfTogJHtvcmlnaW5hbEVycm9yTWVzc2FnZX1gO1xuICAgICAgY29uc3QgbmV3RXJyb3JNZXNzYWdlID0gYEludmFsaWQgaW5wdXQ6ICR7dXJpfSAtIE9yaWdpbmFsIGVycm9yOiAke29yaWdpbmFsRXJyb3JTdHJpbmd9YDtcbiAgICAgIGVycm9yID0gbmV3IEludmFsaWRVcmkobmV3RXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLy8gUmVmOiBodHRwczovL3NoYWRvd3NvY2tzLm9yZy9lbi9jb25maWcvcXVpY2stZ3VpZGUuaHRtbFxuZXhwb3J0IGNsYXNzIExlZ2FjeUJhc2U2NFVyaSBleHRlbmRzIFNoYWRvd3NvY2tzVXJpIHtcbiAgc3RhdGljIHBhcnNlKHVyaTogc3RyaW5nKTogQ29uZmlnIHtcbiAgICBTaGFkb3dzb2Nrc1VyaS52YWxpZGF0ZVByb3RvY29sKHVyaSk7XG4gICAgY29uc3QgaGFzaEluZGV4ID0gdXJpLmluZGV4T2YoJyMnKTtcbiAgICBsZXQgYjY0RW5kSW5kZXggPSBoYXNoSW5kZXg7XG4gICAgbGV0IHRhZ1N0YXJ0SW5kZXggPSBoYXNoSW5kZXggKyAxO1xuICAgIGlmIChoYXNoSW5kZXggPT09IC0xKSB7XG4gICAgICBiNjRFbmRJbmRleCA9IHRhZ1N0YXJ0SW5kZXggPSB1cmkubGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSBuZXcgVGFnKGRlY29kZVVSSUNvbXBvbmVudCh1cmkuc3Vic3RyaW5nKHRhZ1N0YXJ0SW5kZXgpKSk7XG4gICAgY29uc3QgYjY0RW5jb2RlZERhdGEgPSB1cmkuc3Vic3RyaW5nKCdzczovLycubGVuZ3RoLCBiNjRFbmRJbmRleCk7XG4gICAgY29uc3QgYjY0RGVjb2RlZERhdGEgPSBiNjREZWNvZGUoYjY0RW5jb2RlZERhdGEpO1xuICAgIGNvbnN0IGF0U2lnbkluZGV4ID0gYjY0RGVjb2RlZERhdGEuaW5kZXhPZignQCcpO1xuICAgIGlmIChhdFNpZ25JbmRleCA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkVXJpKGBNaXNzaW5nIFwiQFwiOiAke2I2NERlY29kZWREYXRhfWApO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2RBbmRQYXNzd29yZCA9IGI2NERlY29kZWREYXRhLnN1YnN0cmluZygwLCBhdFNpZ25JbmRleCk7XG4gICAgY29uc3QgbWV0aG9kRW5kSW5kZXggPSBtZXRob2RBbmRQYXNzd29yZC5pbmRleE9mKCc6Jyk7XG4gICAgaWYgKG1ldGhvZEVuZEluZGV4ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRVcmkoYE1pc3NpbmcgcGFzc3dvcmQgcGFydDogJHttZXRob2RBbmRQYXNzd29yZH1gKTtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kU3RyaW5nID0gbWV0aG9kQW5kUGFzc3dvcmQuc3Vic3RyaW5nKDAsIG1ldGhvZEVuZEluZGV4KTtcbiAgICBjb25zdCBtZXRob2QgPSBuZXcgTWV0aG9kKG1ldGhvZFN0cmluZyk7XG4gICAgY29uc3QgcGFzc3dvcmRTdGFydEluZGV4ID0gbWV0aG9kRW5kSW5kZXggKyAxO1xuICAgIGNvbnN0IHBhc3N3b3JkU3RyaW5nID0gbWV0aG9kQW5kUGFzc3dvcmQuc3Vic3RyaW5nKHBhc3N3b3JkU3RhcnRJbmRleCk7XG4gICAgY29uc3QgcGFzc3dvcmQgPSBuZXcgUGFzc3dvcmQocGFzc3dvcmRTdHJpbmcpO1xuICAgIGNvbnN0IGhvc3RTdGFydEluZGV4ID0gYXRTaWduSW5kZXggKyAxO1xuICAgIGNvbnN0IGhvc3RBbmRQb3J0ID0gYjY0RGVjb2RlZERhdGEuc3Vic3RyaW5nKGhvc3RTdGFydEluZGV4KTtcbiAgICBjb25zdCBob3N0RW5kSW5kZXggPSBob3N0QW5kUG9ydC5sYXN0SW5kZXhPZignOicpO1xuICAgIGlmIChob3N0RW5kSW5kZXggPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFVyaShgTWlzc2luZyBwb3J0IHBhcnQ6ICR7aG9zdEFuZFBvcnR9YCk7XG4gICAgfVxuICAgIGNvbnN0IHVyaUZvcm1hdHRlZEhvc3QgPSBob3N0QW5kUG9ydC5zdWJzdHJpbmcoMCwgaG9zdEVuZEluZGV4KTtcbiAgICBsZXQgaG9zdDogSG9zdDtcbiAgICB0cnkge1xuICAgICAgaG9zdCA9IG5ldyBIb3N0KHVyaUZvcm1hdHRlZEhvc3QpO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIC8vIENvdWxkIGJlIElQdjYgaG9zdCBmb3JtYXR0ZWQgd2l0aCBzdXJyb3VuZGluZyBicmFja2V0cywgc28gdHJ5IHN0cmlwcGluZyBmaXJzdCBhbmQgbGFzdFxuICAgICAgLy8gY2hhcmFjdGVycy4gSWYgdGhpcyB0aHJvd3MsIGdpdmUgdXAgYW5kIGxldCB0aGUgZXhjZXB0aW9uIHByb3BhZ2F0ZS5cbiAgICAgIGhvc3QgPSBuZXcgSG9zdCh1cmlGb3JtYXR0ZWRIb3N0LnN1YnN0cmluZygxLCB1cmlGb3JtYXR0ZWRIb3N0Lmxlbmd0aCAtIDEpKTtcbiAgICB9XG4gICAgY29uc3QgcG9ydFN0YXJ0SW5kZXggPSBob3N0RW5kSW5kZXggKyAxO1xuICAgIGNvbnN0IHBvcnRTdHJpbmcgPSBob3N0QW5kUG9ydC5zdWJzdHJpbmcocG9ydFN0YXJ0SW5kZXgpO1xuICAgIGNvbnN0IHBvcnQgPSBuZXcgUG9ydChwb3J0U3RyaW5nKTtcbiAgICByZXR1cm4ge21ldGhvZCwgcGFzc3dvcmQsIGhvc3QsIHBvcnQsIHRhZ307XG4gIH1cblxuICBzdGF0aWMgc3RyaW5naWZ5KGNvbmZpZzogQ29uZmlnKSB7XG4gICAgY29uc3Qge21ldGhvZCwgcGFzc3dvcmQsIGhvc3QsIHBvcnR9ID0gY29uZmlnO1xuICAgIGNvbnN0IGhhc2ggPSBTaGFkb3dzb2Nrc1VyaS5nZXRIYXNoKGNvbmZpZy50YWcpO1xuICAgIGxldCBiNjRFbmNvZGVkRGF0YSA9IGI2NEVuY29kZShgJHttZXRob2QuZGF0YX06JHtwYXNzd29yZC5kYXRhfUAke2hvc3QuZGF0YX06JHtwb3J0LmRhdGF9YCk7XG4gICAgY29uc3QgZGF0YUxlbmd0aCA9IGI2NEVuY29kZWREYXRhLmxlbmd0aDtcbiAgICBsZXQgcGFkZGluZ0xlbmd0aCA9IDA7XG4gICAgZm9yICg7IGI2NEVuY29kZWREYXRhW2RhdGFMZW5ndGggLSAxIC0gcGFkZGluZ0xlbmd0aF0gPT09ICc9JzsgcGFkZGluZ0xlbmd0aCsrKTtcbiAgICBiNjRFbmNvZGVkRGF0YSA9IHBhZGRpbmdMZW5ndGggPT09IDAgPyBiNjRFbmNvZGVkRGF0YSA6XG4gICAgICAgIGI2NEVuY29kZWREYXRhLnN1YnN0cmluZygwLCBkYXRhTGVuZ3RoIC0gcGFkZGluZ0xlbmd0aCk7XG4gICAgcmV0dXJuIGBzczovLyR7YjY0RW5jb2RlZERhdGF9JHtoYXNofWA7XG4gIH1cbn1cblxuLy8gUmVmOiBodHRwczovL3NoYWRvd3NvY2tzLm9yZy9lbi9zcGVjL1NJUDAwMi1VUkktU2NoZW1lLmh0bWxcbi8vIE5PVEU6IEN1cnJlbnRseSB0aGUgcGx1Z2luIHF1ZXJ5IHBhcmFtIGlzIHByZXNlcnZlZCBvbiBhIGJlc3QtZWZmb3J0IGJhc2lzLiBJdCBpcyBzaWxlbnRseVxuLy8gICAgICAgZHJvcHBlZCBvbiBwbGF0Zm9ybXMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGUgZnVsbCB3aGF0d2cgVVJMIHN0YW5kYXJkIChjZi4gYHNlYXJjaFBhcmFtc2ApLlxuLy8gICAgICAgUmVmOlxuLy8gICAgICAgICAtIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLWNsYXNzXG4vLyAgICAgICAgIC0gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD11cmxzZWFyY2hwYXJhbXNcbmV4cG9ydCBjbGFzcyBTaXAwMDJVcmkgZXh0ZW5kcyBTaGFkb3dzb2Nrc1VyaSB7XG4gIHN0YXRpYyBwYXJzZSh1cmk6IHN0cmluZyk6IENvbmZpZyB7XG4gICAgU2hhZG93c29ja3NVcmkudmFsaWRhdGVQcm90b2NvbCh1cmkpO1xuICAgIC8vIENhbiB1c2UgYnVpbHQtaW4gVVJMIHBhcnNlciBmb3IgZXhwZWRpZW5jZS4gSnVzdCBoYXZlIHRvIHJlcGxhY2UgXCJzc1wiIHdpdGggXCJodHRwXCIgdG8gZW5zdXJlXG4gICAgLy8gY29ycmVjdCByZXN1bHRzLlxuICAgIGNvbnN0IGlucHV0Rm9yVXJsUGFyc2VyID0gYGh0dHAke3VyaS5zdWJzdHJpbmcoMil9YDtcbiAgICAvLyBUaGUgYnVpbHQtaW4gVVJMIHBhcnNlciB0aHJvd3MgYXMgZGVzaXJlZCB3aGVuIGdpdmVuIFVSSXMgd2l0aCBpbnZhbGlkIHN5bnRheC5cbiAgICBjb25zdCB1cmxQYXJzZXJSZXN1bHQgPSBuZXcgVVJMKGlucHV0Rm9yVXJsUGFyc2VyKTtcbiAgICBjb25zdCB1cmlGb3JtYXR0ZWRIb3N0ID0gdXJsUGFyc2VyUmVzdWx0Lmhvc3RuYW1lO1xuICAgIC8vIFVSSS1mb3JtYXR0ZWQgSVB2NiBob3N0bmFtZXMgaGF2ZSBzdXJyb3VuZGluZyBicmFja2V0cy5cbiAgICBjb25zdCBsYXN0ID0gdXJpRm9ybWF0dGVkSG9zdC5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGJyYWNrZXRzID0gdXJpRm9ybWF0dGVkSG9zdFswXSA9PT0gJ1snICYmIHVyaUZvcm1hdHRlZEhvc3RbbGFzdF0gPT09ICddJztcbiAgICBjb25zdCBob3N0U3RyaW5nID0gYnJhY2tldHMgPyB1cmlGb3JtYXR0ZWRIb3N0LnN1YnN0cmluZygxLCBsYXN0KSA6IHVyaUZvcm1hdHRlZEhvc3Q7XG4gICAgY29uc3QgaG9zdCA9IG5ldyBIb3N0KGhvc3RTdHJpbmcpO1xuICAgIGNvbnN0IHBvcnQgPSBuZXcgUG9ydCh1cmxQYXJzZXJSZXN1bHQucG9ydCk7XG4gICAgY29uc3QgdGFnID0gbmV3IFRhZyhkZWNvZGVVUklDb21wb25lbnQodXJsUGFyc2VyUmVzdWx0Lmhhc2guc3Vic3RyaW5nKDEpKSk7XG4gICAgY29uc3QgYjY0RW5jb2RlZFVzZXJJbmZvID0gdXJsUGFyc2VyUmVzdWx0LnVzZXJuYW1lLnJlcGxhY2UoLyUzRC9nLCAnPScpO1xuICAgIC8vIGJhc2U2NC5kZWNvZGUgdGhyb3dzIGFzIGRlc2lyZWQgd2hlbiBnaXZlbiBpbnZhbGlkIGJhc2U2NCBpbnB1dC5cbiAgICBjb25zdCBiNjREZWNvZGVkVXNlckluZm8gPSBiNjREZWNvZGUoYjY0RW5jb2RlZFVzZXJJbmZvKTtcbiAgICBjb25zdCBjb2xvbklkeCA9IGI2NERlY29kZWRVc2VySW5mby5pbmRleE9mKCc6Jyk7XG4gICAgaWYgKGNvbG9uSWR4ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRVcmkoYE1pc3NpbmcgcGFzc3dvcmQgcGFydDogJHtiNjREZWNvZGVkVXNlckluZm99YCk7XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZFN0cmluZyA9IGI2NERlY29kZWRVc2VySW5mby5zdWJzdHJpbmcoMCwgY29sb25JZHgpO1xuICAgIGNvbnN0IG1ldGhvZCA9IG5ldyBNZXRob2QobWV0aG9kU3RyaW5nKTtcbiAgICBjb25zdCBwYXNzd29yZFN0cmluZyA9IGI2NERlY29kZWRVc2VySW5mby5zdWJzdHJpbmcoY29sb25JZHggKyAxKTtcbiAgICBjb25zdCBwYXNzd29yZCA9IG5ldyBQYXNzd29yZChwYXNzd29yZFN0cmluZyk7XG4gICAgbGV0IHBsdWdpbjogUGx1Z2luIHwgdW5kZWZpbmVkO1xuICAgIGlmICh1cmxQYXJzZXJSZXN1bHQuc2VhcmNoUGFyYW1zKSB7XG4gICAgICBjb25zdCBwbHVnaW5TdHJpbmcgPSB1cmxQYXJzZXJSZXN1bHQuc2VhcmNoUGFyYW1zLmdldCgncGx1Z2luJyk7XG4gICAgICBwbHVnaW4gPSBwbHVnaW5TdHJpbmcgPyBuZXcgUGx1Z2luKHBsdWdpblN0cmluZykgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB7bWV0aG9kLCBwYXNzd29yZCwgaG9zdCwgcG9ydCwgdGFnLCBwbHVnaW59O1xuICB9XG5cbiAgc3RhdGljIHN0cmluZ2lmeShjb25maWc6IENvbmZpZykge1xuICAgIGNvbnN0IHtob3N0LCBwb3J0LCBtZXRob2QsIHBhc3N3b3JkfSA9IGNvbmZpZztcbiAgICBjb25zdCB1c2VySW5mbyA9IGI2NEVuY29kZShgJHttZXRob2QuZGF0YX06JHtwYXNzd29yZC5kYXRhfWApO1xuICAgIGNvbnN0IHVyaUhvc3QgPSBTaGFkb3dzb2Nrc1VyaS5nZXRVcmlGb3JtYXR0ZWRIb3N0KGhvc3QpO1xuICAgIGNvbnN0IGhhc2ggPSBTaGFkb3dzb2Nrc1VyaS5nZXRIYXNoKGNvbmZpZy50YWcpO1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gY29uZmlnLnBsdWdpbiAmJiBjb25maWcucGx1Z2luLmRhdGEgPyBgP3BsdWdpbj0ke2NvbmZpZy5wbHVnaW4uZGF0YX1gIDogJyc7XG4gICAgcmV0dXJuIGBzczovLyR7dXNlckluZm99QCR7dXJpSG9zdH06JHtwb3J0LmRhdGF9LyR7cXVlcnlTdHJpbmd9JHtoYXNofWA7XG4gIH1cbn1cbiJdfQ==
