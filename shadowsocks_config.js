"use strict";
(function iife() {
  const platformExportObj = (function detectPlatformExportObj() {
    if (typeof module !== 'undefined' && module.exports) {
      return module.exports;  // node
    } else if (typeof window !== 'undefined') {
      return window;  // browser
    }
    throw new Error('Could not detect platform global object (no window or module.exports)');
  })();
const isBrowser = typeof window !== 'undefined';
const b64Encode = isBrowser ? btoa : require('base-64').encode;
const b64Decode = isBrowser ? atob : require('base-64').decode;
const URL = isBrowser ? window.URL : require('url').URL;
class ShadowsocksConfigError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = new.target.name;
    }
}
platformExportObj.ShadowsocksConfigError = ShadowsocksConfigError;
class InvalidConfigField extends ShadowsocksConfigError {
    constructor(message) {
        super(message);
        this.message = message;
    }
}
platformExportObj.InvalidConfigField = InvalidConfigField;
class InvalidURI extends ShadowsocksConfigError {
    constructor(message) {
        super(message);
        this.message = message;
    }
}
platformExportObj.InvalidURI = InvalidURI;
class ConfigField {
    constructor(data) {
        this.data = data;
    }
    toString() {
        return this.data.toString();
    }
}
platformExportObj.ConfigField = ConfigField;
function throwErrorForInvalidField(name, value) {
    throw new InvalidConfigField(`Invalid ${name}: ${value}`);
}
class Host extends ConfigField {
    constructor(host) {
        if (host instanceof Host) {
            host = host.data;
        }
        try {
            const urlParserResult = new URL(`http://${host}/`);
            super(urlParserResult.hostname);
        }
        catch (_) {
            throwErrorForInvalidField('host', host);
        }
    }
}
platformExportObj.Host = Host;
class Port extends ConfigField {
    constructor(port) {
        if (port instanceof Port) {
            port = port.data;
        }
        const throwError = () => throwErrorForInvalidField('port', port);
        if (port === '')
            throwError();
        try {
            const urlParserResult = new URL(`http://0.0.0.0:${port}/`);
            super(urlParserResult.port);
        }
        catch (_) {
            throwError();
        }
    }
}
platformExportObj.Port = Port;
class Method extends ConfigField {
    constructor(method) {
        if (method instanceof Method) {
            method = method.data;
        }
        super(method);
        if (!Method.METHODS.has(method)) {
            throwErrorForInvalidField('method', method);
        }
    }
}
Method.METHODS = new Set([
    'rc4-md5',
    'aes-128-gcm',
    'aes-192-gcm',
    'aes-256-gcm',
    'aes-128-cfb',
    'aes-192-cfb',
    'aes-256-cfb',
    'aes-128-ctr',
    'aes-192-ctr',
    'aes-256-ctr',
    'camellia-128-cfb',
    'camellia-192-cfb',
    'camellia-256-cfb',
    'bf-cfb',
    'chacha20-ietf-poly1305',
    'salsa20',
    'chacha20',
    'chacha20-ietf',
]);
platformExportObj.Method = Method;
class Password extends ConfigField {
    constructor(password) {
        super((password instanceof Password ? password.data : password) || '');
    }
}
platformExportObj.Password = Password;
class Tag extends ConfigField {
    constructor(tag) {
        super((tag instanceof Tag ? tag.data : tag) || '');
    }
}
platformExportObj.Tag = Tag;
class Plugin extends ConfigField {
    constructor(plugin) {
        super((plugin instanceof Plugin ? plugin.data : plugin) || '');
    }
}
platformExportObj.Plugin = Plugin;
class Config {
    constructor(config) {
        this.host = config.host;
        this.port = config.port;
        this.method = config.method;
        this.password = config.password;
        this.tag = config.tag;
    }
    set host(host) {
        this.host_ = new Host(host);
    }
    set port(port) {
        this.port_ = new Port(port);
    }
    set method(method) {
        this.method_ = new Method(method);
    }
    set password(password) {
        this.password_ = new Password(password);
    }
    set tag(tag) {
        this.tag_ = new Tag(tag);
    }
    get host() {
        return this.host_.toString();
    }
    get port() {
        return this.port_.toString();
    }
    get method() {
        return this.method_.toString();
    }
    get password() {
        return this.password_.toString();
    }
    get tag() {
        return this.tag_.toString();
    }
}
platformExportObj.Config = Config;
class ShadowsocksURI extends Config {
    constructor(config) {
        super(new Config(config));
    }
    static validateProtocol(uri) {
        if (!uri.startsWith('ss://')) {
            throw new InvalidURI(`URI must start with "ss://": ${uri}`);
        }
    }
    static getHash(config) {
        const tag = config.tag instanceof Tag ? config.tag.data : config.tag;
        return tag ? `#${encodeURIComponent(tag)}` : '';
    }
    static parse(uri) {
        let error;
        for (const UriType of [LegacyBase64URI, Sip002URI]) {
            try {
                return UriType.parse(uri);
            }
            catch (e) {
                error = error || e;
            }
        }
        if (!(error instanceof InvalidURI)) {
            const originalErrorName = error.name || '(Unnamed Error)';
            const originalErrorMessage = error.message || '(no error message provided)';
            const originalErrorString = `${originalErrorName}: ${originalErrorMessage}`;
            const newErrorMessage = `Invalid input: ${uri} - Original error: ${originalErrorString}`;
            error = new InvalidURI(newErrorMessage);
        }
        throw error;
    }
}
platformExportObj.ShadowsocksURI = ShadowsocksURI;
class LegacyBase64URI extends ShadowsocksURI {
    constructor(config) {
        super(new Config(config));
        const { method, password, host, port } = this;
        const b64EncodedData = b64Encode(`${method}:${password}@${host}:${port}`);
        const dataLength = b64EncodedData.length;
        let paddingLength = 0;
        for (; b64EncodedData[dataLength - 1 - paddingLength] === '='; paddingLength++)
            ;
        this.b64EncodedData = paddingLength === 0 ? b64EncodedData :
            b64EncodedData.substring(0, dataLength - paddingLength);
    }
    static parse(uri) {
        ShadowsocksURI.validateProtocol(uri);
        const hashIndex = uri.indexOf('#');
        let b64EndIndex = hashIndex;
        let tagStartIndex = hashIndex + 1;
        if (hashIndex === -1) {
            b64EndIndex = tagStartIndex = uri.length;
        }
        const tag = new Tag(decodeURIComponent(uri.substring(tagStartIndex)));
        const b64EncodedData = uri.substring('ss://'.length, b64EndIndex);
        const b64DecodedData = b64Decode(b64EncodedData);
        const atSignIndex = b64DecodedData.indexOf('@');
        if (atSignIndex === -1) {
            throw new InvalidURI(`Missing "@": ${b64DecodedData}`);
        }
        const methodAndPassword = b64DecodedData.substring(0, atSignIndex);
        const methodEndIndex = methodAndPassword.indexOf(':');
        if (methodEndIndex === -1) {
            throw new InvalidURI(`Missing password part: ${methodAndPassword}`);
        }
        const methodString = methodAndPassword.substring(0, methodEndIndex);
        const method = new Method(methodString);
        const passwordStartIndex = methodEndIndex + 1;
        const passwordString = methodAndPassword.substring(passwordStartIndex);
        const password = new Password(passwordString);
        const hostStartIndex = atSignIndex + 1;
        const hostAndPort = b64DecodedData.substring(hostStartIndex);
        const hostEndIndex = hostAndPort.indexOf(':');
        if (hostEndIndex === -1) {
            throw new InvalidURI(`Missing port part: ${hostAndPort}`);
        }
        const host = new Host(hostAndPort.substring(0, hostEndIndex));
        const portStartIndex = hostEndIndex + 1;
        const portString = hostAndPort.substring(portStartIndex);
        const port = new Port(portString);
        return new LegacyBase64URI({ method, password, host, port, tag });
    }
    toString() {
        const { b64EncodedData, tag } = this;
        const hash = ShadowsocksURI.getHash(this);
        return `ss://${b64EncodedData}${hash}`;
    }
}
platformExportObj.LegacyBase64URI = LegacyBase64URI;
class Sip002URI extends ShadowsocksURI {
    constructor(config) {
        super(new Config(config));
        const { method, password } = this;
        this.b64EncodedUserInfo = b64Encode(`${method}:${password}`);
        this.plugin = config.plugin;
    }
    set plugin(plugin) {
        this.plugin_ = new Plugin(plugin);
    }
    get plugin() {
        return this.plugin_.toString();
    }
    static parse(uri) {
        ShadowsocksURI.validateProtocol(uri);
        const inputForUrlParser = `http${uri.substring(2)}`;
        const urlParserResult = new URL(inputForUrlParser);
        const host = new Host(urlParserResult.hostname);
        const port = new Port(urlParserResult.port);
        const tag = new Tag(decodeURIComponent(urlParserResult.hash.substring(1)));
        const b64EncodedUserInfo = urlParserResult.username.replace(/%3D/g, '=');
        const b64DecodedUserInfo = b64Decode(b64EncodedUserInfo);
        const colonIdx = b64DecodedUserInfo.indexOf(':');
        if (colonIdx === -1) {
            throw new InvalidURI(`Missing password part: ${b64DecodedUserInfo}`);
        }
        const methodString = b64DecodedUserInfo.substring(0, colonIdx);
        const method = new Method(methodString);
        const passwordString = b64DecodedUserInfo.substring(colonIdx + 1);
        const password = new Password(passwordString);
        let plugin;
        if (urlParserResult.searchParams) {
            const pluginString = urlParserResult.searchParams.get('plugin');
            plugin = pluginString ? new Plugin(pluginString) : undefined;
        }
        return new Sip002URI({ method, password, host, port, tag, plugin });
    }
    toString() {
        const { b64EncodedUserInfo, host, port, plugin, tag } = this;
        const queryString = plugin ? `?plugin=${plugin}` : '';
        const hash = ShadowsocksURI.getHash(this);
        return `ss://${b64EncodedUserInfo}@${host}:${port}/${queryString}${hash}`;
    }
}
platformExportObj.Sip002URI = Sip002URI;
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
